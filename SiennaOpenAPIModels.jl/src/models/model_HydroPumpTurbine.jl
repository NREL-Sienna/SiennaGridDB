# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""HydroPumpTurbine

    HydroPumpTurbine(;
        id=nothing,
        name=nothing,
        available=nothing,
        bus=nothing,
        active_power=nothing,
        reactive_power=nothing,
        rating=nothing,
        active_power_limits=nothing,
        reactive_power_limits=nothing,
        active_power_limits_pump=nothing,
        outflow_limits=nothing,
        head_reservoir=nothing,
        tail_reservoir=nothing,
        powerhouse_elevation=nothing,
        ramp_limits=nothing,
        time_limits=nothing,
        base_power=nothing,
        operation_cost=nothing,
        active_power_pump=0.0,
        efficiency=nothing,
        transition_time=nothing,
        minimum_time=nothing,
        conversion_factor=1.0,
        must_run=false,
        prime_mover_type="OT",
        dynamic_injector=nothing,
    )

    - id::Int64
    - name::String
    - available::Bool
    - bus::Int64
    - active_power::Float64
    - reactive_power::Float64
    - rating::Float64
    - active_power_limits::MinMax
    - reactive_power_limits::MinMax
    - active_power_limits_pump::MinMax
    - outflow_limits::MinMax
    - head_reservoir::HydroReservoir
    - tail_reservoir::HydroReservoir
    - powerhouse_elevation::Float64
    - ramp_limits::UpDown
    - time_limits::UpDown
    - base_power::Float64
    - operation_cost::HydroStorageGenerationCost
    - active_power_pump::Float64
    - efficiency::TurbinePump
    - transition_time::TurbinePump
    - minimum_time::TurbinePump
    - conversion_factor::Float64
    - must_run::Bool
    - prime_mover_type::String
    - dynamic_injector::Any
"""
Base.@kwdef mutable struct HydroPumpTurbine <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    bus::Union{Nothing, Int64} = nothing
    active_power::Union{Nothing, Float64} = nothing
    reactive_power::Union{Nothing, Float64} = nothing
    rating::Union{Nothing, Float64} = nothing
    active_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    reactive_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    active_power_limits_pump = nothing # spec type: Union{ Nothing, MinMax }
    outflow_limits = nothing # spec type: Union{ Nothing, MinMax }
    head_reservoir = nothing # spec type: Union{ Nothing, HydroReservoir }
    tail_reservoir = nothing # spec type: Union{ Nothing, HydroReservoir }
    powerhouse_elevation::Union{Nothing, Float64} = nothing
    ramp_limits = nothing # spec type: Union{ Nothing, UpDown }
    time_limits = nothing # spec type: Union{ Nothing, UpDown }
    base_power::Union{Nothing, Float64} = nothing
    operation_cost = nothing # spec type: Union{ Nothing, HydroStorageGenerationCost }
    active_power_pump::Union{Nothing, Float64} = 0.0
    efficiency = nothing # spec type: Union{ Nothing, TurbinePump }
    transition_time = nothing # spec type: Union{ Nothing, TurbinePump }
    minimum_time = nothing # spec type: Union{ Nothing, TurbinePump }
    conversion_factor::Union{Nothing, Float64} = 1.0
    must_run::Union{Nothing, Bool} = false
    prime_mover_type::Union{Nothing, String} = "OT"
    dynamic_injector::Union{Nothing, Any} = nothing

    function HydroPumpTurbine(
        id,
        name,
        available,
        bus,
        active_power,
        reactive_power,
        rating,
        active_power_limits,
        reactive_power_limits,
        active_power_limits_pump,
        outflow_limits,
        head_reservoir,
        tail_reservoir,
        powerhouse_elevation,
        ramp_limits,
        time_limits,
        base_power,
        operation_cost,
        active_power_pump,
        efficiency,
        transition_time,
        minimum_time,
        conversion_factor,
        must_run,
        prime_mover_type,
        dynamic_injector,
    )
        o = new(
            id,
            name,
            available,
            bus,
            active_power,
            reactive_power,
            rating,
            active_power_limits,
            reactive_power_limits,
            active_power_limits_pump,
            outflow_limits,
            head_reservoir,
            tail_reservoir,
            powerhouse_elevation,
            ramp_limits,
            time_limits,
            base_power,
            operation_cost,
            active_power_pump,
            efficiency,
            transition_time,
            minimum_time,
            conversion_factor,
            must_run,
            prime_mover_type,
            dynamic_injector,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type HydroPumpTurbine

const _property_types_HydroPumpTurbine = Dict{Symbol, String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("available") => "Bool",
    Symbol("bus") => "Int64",
    Symbol("active_power") => "Float64",
    Symbol("reactive_power") => "Float64",
    Symbol("rating") => "Float64",
    Symbol("active_power_limits") => "MinMax",
    Symbol("reactive_power_limits") => "MinMax",
    Symbol("active_power_limits_pump") => "MinMax",
    Symbol("outflow_limits") => "MinMax",
    Symbol("head_reservoir") => "HydroReservoir",
    Symbol("tail_reservoir") => "HydroReservoir",
    Symbol("powerhouse_elevation") => "Float64",
    Symbol("ramp_limits") => "UpDown",
    Symbol("time_limits") => "UpDown",
    Symbol("base_power") => "Float64",
    Symbol("operation_cost") => "HydroStorageGenerationCost",
    Symbol("active_power_pump") => "Float64",
    Symbol("efficiency") => "TurbinePump",
    Symbol("transition_time") => "TurbinePump",
    Symbol("minimum_time") => "TurbinePump",
    Symbol("conversion_factor") => "Float64",
    Symbol("must_run") => "Bool",
    Symbol("prime_mover_type") => "String",
    Symbol("dynamic_injector") => "Any",
)
OpenAPI.property_type(::Type{HydroPumpTurbine}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_HydroPumpTurbine[name]))}

function OpenAPI.check_required(o::HydroPumpTurbine)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.bus === nothing && (return false)
    o.active_power === nothing && (return false)
    o.reactive_power === nothing && (return false)
    o.rating === nothing && (return false)
    o.active_power_limits === nothing && (return false)
    o.active_power_limits_pump === nothing && (return false)
    o.head_reservoir === nothing && (return false)
    o.tail_reservoir === nothing && (return false)
    o.powerhouse_elevation === nothing && (return false)
    o.base_power === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::HydroPumpTurbine)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("id"), o.id)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("name"), o.name)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("available"), o.available)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("bus"), o.bus)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("active_power"), o.active_power)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("reactive_power"), o.reactive_power)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("rating"), o.rating)
    OpenAPI.validate_property(
        HydroPumpTurbine,
        Symbol("active_power_limits"),
        o.active_power_limits,
    )
    OpenAPI.validate_property(
        HydroPumpTurbine,
        Symbol("reactive_power_limits"),
        o.reactive_power_limits,
    )
    OpenAPI.validate_property(
        HydroPumpTurbine,
        Symbol("active_power_limits_pump"),
        o.active_power_limits_pump,
    )
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("outflow_limits"), o.outflow_limits)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("head_reservoir"), o.head_reservoir)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("tail_reservoir"), o.tail_reservoir)
    OpenAPI.validate_property(
        HydroPumpTurbine,
        Symbol("powerhouse_elevation"),
        o.powerhouse_elevation,
    )
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("ramp_limits"), o.ramp_limits)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("time_limits"), o.time_limits)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("base_power"), o.base_power)
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("operation_cost"), o.operation_cost)
    OpenAPI.validate_property(
        HydroPumpTurbine,
        Symbol("active_power_pump"),
        o.active_power_pump,
    )
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("efficiency"), o.efficiency)
    OpenAPI.validate_property(
        HydroPumpTurbine,
        Symbol("transition_time"),
        o.transition_time,
    )
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("minimum_time"), o.minimum_time)
    OpenAPI.validate_property(
        HydroPumpTurbine,
        Symbol("conversion_factor"),
        o.conversion_factor,
    )
    OpenAPI.validate_property(HydroPumpTurbine, Symbol("must_run"), o.must_run)
    OpenAPI.validate_property(
        HydroPumpTurbine,
        Symbol("prime_mover_type"),
        o.prime_mover_type,
    )
    OpenAPI.validate_property(
        HydroPumpTurbine,
        Symbol("dynamic_injector"),
        o.dynamic_injector,
    )
end

function OpenAPI.validate_property(::Type{HydroPumpTurbine}, name::Symbol, val)
    if name === Symbol("prime_mover_type")
        OpenAPI.validate_param(
            name,
            "HydroPumpTurbine",
            :enum,
            val,
            [
                "BA",
                "BT",
                "CA",
                "CC",
                "CE",
                "CP",
                "CS",
                "CT",
                "ES",
                "FC",
                "FW",
                "GT",
                "HA",
                "HB",
                "HK",
                "HY",
                "IC",
                "PS",
                "OT",
                "ST",
                "PVe",
                "WT",
                "WS",
            ],
        )
    end
end
