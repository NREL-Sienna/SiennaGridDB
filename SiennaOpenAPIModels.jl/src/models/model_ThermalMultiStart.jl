# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""ThermalMultiStart

    ThermalMultiStart(;
        id=nothing,
        name=nothing,
        available=nothing,
        status=nothing,
        bus=nothing,
        active_power=nothing,
        reactive_power=nothing,
        rating=nothing,
        prime_mover_type="OT",
        fuel="OTHER",
        active_power_limits=nothing,
        reactive_power_limits=nothing,
        ramp_limits=nothing,
        power_trajectory=nothing,
        time_limits=nothing,
        start_time_limits=nothing,
        start_types=nothing,
        operation_cost=nothing,
        base_power=nothing,
        time_at_status=10000.0,
        must_run=false,
        dynamic_injector=nothing,
    )

    - id::Int64
    - name::String
    - available::Bool
    - status::Bool
    - bus::Int64
    - active_power::Float64
    - reactive_power::Float64
    - rating::Float64
    - prime_mover_type::String
    - fuel::String : Thermal fuels that reflect options in the EIA annual energy review.
    - active_power_limits::MinMax
    - reactive_power_limits::MinMax
    - ramp_limits::UpDown
    - power_trajectory::StartUpShutDown
    - time_limits::UpDown
    - start_time_limits::StartUpStages
    - start_types::Int64
    - operation_cost::ThermalGenerationCost
    - base_power::Float64
    - time_at_status::Float64
    - must_run::Bool
    - dynamic_injector::Any
"""
Base.@kwdef mutable struct ThermalMultiStart <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    status::Union{Nothing, Bool} = nothing
    bus::Union{Nothing, Int64} = nothing
    active_power::Union{Nothing, Float64} = nothing
    reactive_power::Union{Nothing, Float64} = nothing
    rating::Union{Nothing, Float64} = nothing
    prime_mover_type::Union{Nothing, String} = "OT"
    fuel::Union{Nothing, String} = "OTHER"
    active_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    reactive_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    ramp_limits = nothing # spec type: Union{ Nothing, UpDown }
    power_trajectory = nothing # spec type: Union{ Nothing, StartUpShutDown }
    time_limits = nothing # spec type: Union{ Nothing, UpDown }
    start_time_limits = nothing # spec type: Union{ Nothing, StartUpStages }
    start_types::Union{Nothing, Int64} = nothing
    operation_cost = nothing # spec type: Union{ Nothing, ThermalGenerationCost }
    base_power::Union{Nothing, Float64} = nothing
    time_at_status::Union{Nothing, Float64} = 10000.0
    must_run::Union{Nothing, Bool} = false
    dynamic_injector::Union{Nothing, Any} = nothing

    function ThermalMultiStart(
        id,
        name,
        available,
        status,
        bus,
        active_power,
        reactive_power,
        rating,
        prime_mover_type,
        fuel,
        active_power_limits,
        reactive_power_limits,
        ramp_limits,
        power_trajectory,
        time_limits,
        start_time_limits,
        start_types,
        operation_cost,
        base_power,
        time_at_status,
        must_run,
        dynamic_injector,
    )
        o = new(
            id,
            name,
            available,
            status,
            bus,
            active_power,
            reactive_power,
            rating,
            prime_mover_type,
            fuel,
            active_power_limits,
            reactive_power_limits,
            ramp_limits,
            power_trajectory,
            time_limits,
            start_time_limits,
            start_types,
            operation_cost,
            base_power,
            time_at_status,
            must_run,
            dynamic_injector,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ThermalMultiStart

const _property_types_ThermalMultiStart = Dict{Symbol, String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("available") => "Bool",
    Symbol("status") => "Bool",
    Symbol("bus") => "Int64",
    Symbol("active_power") => "Float64",
    Symbol("reactive_power") => "Float64",
    Symbol("rating") => "Float64",
    Symbol("prime_mover_type") => "String",
    Symbol("fuel") => "String",
    Symbol("active_power_limits") => "MinMax",
    Symbol("reactive_power_limits") => "MinMax",
    Symbol("ramp_limits") => "UpDown",
    Symbol("power_trajectory") => "StartUpShutDown",
    Symbol("time_limits") => "UpDown",
    Symbol("start_time_limits") => "StartUpStages",
    Symbol("start_types") => "Int64",
    Symbol("operation_cost") => "ThermalGenerationCost",
    Symbol("base_power") => "Float64",
    Symbol("time_at_status") => "Float64",
    Symbol("must_run") => "Bool",
    Symbol("dynamic_injector") => "Any",
)
OpenAPI.property_type(::Type{ThermalMultiStart}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_ThermalMultiStart[name]))}

function OpenAPI.check_required(o::ThermalMultiStart)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.status === nothing && (return false)
    o.bus === nothing && (return false)
    o.active_power === nothing && (return false)
    o.reactive_power === nothing && (return false)
    o.rating === nothing && (return false)
    o.prime_mover_type === nothing && (return false)
    o.fuel === nothing && (return false)
    o.active_power_limits === nothing && (return false)
    o.start_types === nothing && (return false)
    o.operation_cost === nothing && (return false)
    o.base_power === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::ThermalMultiStart)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("id"), o.id)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("name"), o.name)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("available"), o.available)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("status"), o.status)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("bus"), o.bus)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("active_power"), o.active_power)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("reactive_power"), o.reactive_power)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("rating"), o.rating)
    OpenAPI.validate_property(
        ThermalMultiStart,
        Symbol("prime_mover_type"),
        o.prime_mover_type,
    )
    OpenAPI.validate_property(ThermalMultiStart, Symbol("fuel"), o.fuel)
    OpenAPI.validate_property(
        ThermalMultiStart,
        Symbol("active_power_limits"),
        o.active_power_limits,
    )
    OpenAPI.validate_property(
        ThermalMultiStart,
        Symbol("reactive_power_limits"),
        o.reactive_power_limits,
    )
    OpenAPI.validate_property(ThermalMultiStart, Symbol("ramp_limits"), o.ramp_limits)
    OpenAPI.validate_property(
        ThermalMultiStart,
        Symbol("power_trajectory"),
        o.power_trajectory,
    )
    OpenAPI.validate_property(ThermalMultiStart, Symbol("time_limits"), o.time_limits)
    OpenAPI.validate_property(
        ThermalMultiStart,
        Symbol("start_time_limits"),
        o.start_time_limits,
    )
    OpenAPI.validate_property(ThermalMultiStart, Symbol("start_types"), o.start_types)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("operation_cost"), o.operation_cost)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("base_power"), o.base_power)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("time_at_status"), o.time_at_status)
    OpenAPI.validate_property(ThermalMultiStart, Symbol("must_run"), o.must_run)
    OpenAPI.validate_property(
        ThermalMultiStart,
        Symbol("dynamic_injector"),
        o.dynamic_injector,
    )
end

function OpenAPI.validate_property(::Type{ThermalMultiStart}, name::Symbol, val)
    if name === Symbol("prime_mover_type")
        OpenAPI.validate_param(
            name,
            "ThermalMultiStart",
            :enum,
            val,
            [
                "BA",
                "BT",
                "CA",
                "CC",
                "CE",
                "CP",
                "CS",
                "CT",
                "ES",
                "FC",
                "FW",
                "GT",
                "HA",
                "HB",
                "HK",
                "HY",
                "IC",
                "PS",
                "OT",
                "ST",
                "PVe",
                "WT",
                "WS",
            ],
        )
    end

    if name === Symbol("fuel")
        OpenAPI.validate_param(
            name,
            "ThermalMultiStart",
            :enum,
            val,
            [
                "COAL",
                "ANTHRACITE_COAL",
                "BITUMINOUS_COAL",
                "LIGNITE_COAL",
                "SUBBITUMINOUS_COAL",
                "WASTE_COAL",
                "REFINED_COAL",
                "SYNTHESIS_GAS_COAL",
                "DISTILLATE_FUEL_OIL",
                "JET_FUEL",
                "KEROSENE",
                "PETROLEUM_COKE",
                "RESIDUAL_FUEL_OIL",
                "PROPANE",
                "SYNTHESIS_GAS_PETROLEUM_COKE",
                "WASTE_OIL",
                "BLASTE_FURNACE_GAS",
                "NATURAL_GAS",
                "OTHER_GAS",
                "AG_BYPRODUCT",
                "MUNICIPAL_WASTE",
                "OTHER_BIOMASS_SOLIDS",
                "WOOD_WASTE_SOLIDS",
                "OTHER_BIOMASS_LIQUIDS",
                "SLUDGE_WASTE",
                "BLACK_LIQUOR",
                "WOOD_WASTE_LIQUIDS",
                "LANDFILL_GAS",
                "OTHEHR_BIOMASS_GAS",
                "NUCLEAR",
                "WASTE_HEAT",
                "TIREDERIVED_FUEL",
                "OTHER",
            ],
        )
    end
end
