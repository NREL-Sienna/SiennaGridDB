# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EnergyReservoirStorage_operation_cost
Cost representation for storage units

    EnergyReservoirStorageOperationCost(;
        charge_variable_cost=nothing,
        discharge_variable_cost=nothing,
        fixed=0.0,
        shut_down=0.0,
        start_up=nothing,
        energy_shortage_cost=0.0,
        energy_surplus_cost=0.0,
    )

    - charge_variable_cost::EnergyReservoirStorageOperationCostChargeVariableCost
    - discharge_variable_cost::EnergyReservoirStorageOperationCostChargeVariableCost
    - fixed::Float64
    - shut_down::Float64
    - start_up::EnergyReservoirStorageOperationCostStartUp
    - energy_shortage_cost::Float64
    - energy_surplus_cost::Float64
"""
Base.@kwdef mutable struct EnergyReservoirStorageOperationCost <: OpenAPI.APIModel
    charge_variable_cost = nothing # spec type: Union{ Nothing, EnergyReservoirStorageOperationCostChargeVariableCost }
    discharge_variable_cost = nothing # spec type: Union{ Nothing, EnergyReservoirStorageOperationCostChargeVariableCost }
    fixed::Union{Nothing,Float64} = 0.0
    shut_down::Union{Nothing,Float64} = 0.0
    start_up = nothing # spec type: Union{ Nothing, EnergyReservoirStorageOperationCostStartUp }
    energy_shortage_cost::Union{Nothing,Float64} = 0.0
    energy_surplus_cost::Union{Nothing,Float64} = 0.0

    function EnergyReservoirStorageOperationCost(
        charge_variable_cost,
        discharge_variable_cost,
        fixed,
        shut_down,
        start_up,
        energy_shortage_cost,
        energy_surplus_cost,
    )
        OpenAPI.validate_property(
            EnergyReservoirStorageOperationCost,
            Symbol("charge_variable_cost"),
            charge_variable_cost,
        )
        OpenAPI.validate_property(
            EnergyReservoirStorageOperationCost,
            Symbol("discharge_variable_cost"),
            discharge_variable_cost,
        )
        OpenAPI.validate_property(
            EnergyReservoirStorageOperationCost,
            Symbol("fixed"),
            fixed,
        )
        OpenAPI.validate_property(
            EnergyReservoirStorageOperationCost,
            Symbol("shut_down"),
            shut_down,
        )
        OpenAPI.validate_property(
            EnergyReservoirStorageOperationCost,
            Symbol("start_up"),
            start_up,
        )
        OpenAPI.validate_property(
            EnergyReservoirStorageOperationCost,
            Symbol("energy_shortage_cost"),
            energy_shortage_cost,
        )
        OpenAPI.validate_property(
            EnergyReservoirStorageOperationCost,
            Symbol("energy_surplus_cost"),
            energy_surplus_cost,
        )
        return new(
            charge_variable_cost,
            discharge_variable_cost,
            fixed,
            shut_down,
            start_up,
            energy_shortage_cost,
            energy_surplus_cost,
        )
    end
end # type EnergyReservoirStorageOperationCost

const _property_types_EnergyReservoirStorageOperationCost = Dict{Symbol,String}(
    Symbol(
        "charge_variable_cost",
    ) => "EnergyReservoirStorageOperationCostChargeVariableCost",
    Symbol(
        "discharge_variable_cost",
    ) => "EnergyReservoirStorageOperationCostChargeVariableCost",
    Symbol("fixed") => "Float64",
    Symbol("shut_down") => "Float64",
    Symbol("start_up") => "EnergyReservoirStorageOperationCostStartUp",
    Symbol("energy_shortage_cost") => "Float64",
    Symbol("energy_surplus_cost") => "Float64",
)
OpenAPI.property_type(::Type{EnergyReservoirStorageOperationCost}, name::Symbol) = Union{
    Nothing,
    eval(Base.Meta.parse(_property_types_EnergyReservoirStorageOperationCost[name])),
}

function check_required(o::EnergyReservoirStorageOperationCost)
    o.fixed === nothing && (return false)
    o.shut_down === nothing && (return false)
    o.start_up === nothing && (return false)
    true
end

function OpenAPI.validate_property(
    ::Type{EnergyReservoirStorageOperationCost},
    name::Symbol,
    val,
)







end
