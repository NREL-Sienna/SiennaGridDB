# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""TwoTerminalLCCLine

    TwoTerminalLCCLine(;
        id=nothing,
        name=nothing,
        available=nothing,
        arc=nothing,
        active_power_flow=nothing,
        r=nothing,
        transfer_setpoint=nothing,
        scheduled_dc_voltage=nothing,
        rectifier_bridges=nothing,
        rectifier_delay_angle_limits=nothing,
        recrifier_rc=nothing,
        recrifier_xc=nothing,
        recrifier_base_voltage=nothing,
        inverter_bridges=nothing,
        inverter_extinction_angle_limits=nothing,
        inverter_rc=nothing,
        inverter_xc=nothing,
        inverter_base_voltage=nothing,
        power_mode=true,
        switch_mode_voltage=0.0,
        compounding_resistance=0.0,
        min_compounding_voltage=0.0,
        rectifier_transformer_ratio=1.0,
        rectifier_tap_setting=1.0,
        rectifier_tap_limits=nothing,
        rectifier_tap_step=0.00625,
        rectifier_delay_angle=0.0,
        rectifier_capacitor_reactance=0.0,
        inverter_transformer_ratio=1.0,
        inverter_tap_setting=1.0,
        inverter_tap_limits=nothing,
        inverter_tap_step=0.0625,
        inverter_extinction_angle=0.0,
        inverter_capacitor_reactance=0.0,
        active_power_limits_from=nothing,
        active_power_limits_to=nothing,
        reactive_power_limits_from=nothing,
        reactive_power_limits_to=nothing,
        loss=nothing,
    )

    - id::Int64
    - name::String
    - available::Bool
    - arc::Int64
    - active_power_flow::Float64
    - r::Float64
    - transfer_setpoint::Float64
    - scheduled_dc_voltage::Float64
    - rectifier_bridges::Int64
    - rectifier_delay_angle_limits::MinMax
    - recrifier_rc::Float64
    - recrifier_xc::Float64
    - recrifier_base_voltage::Float64
    - inverter_bridges::Int64
    - inverter_extinction_angle_limits::MinMax
    - inverter_rc::Float64
    - inverter_xc::Float64
    - inverter_base_voltage::Float64
    - power_mode::Bool
    - switch_mode_voltage::Float64
    - compounding_resistance::Float64
    - min_compounding_voltage::Float64
    - rectifier_transformer_ratio::Float64
    - rectifier_tap_setting::Float64
    - rectifier_tap_limits::MinMax
    - rectifier_tap_step::Float64
    - rectifier_delay_angle::Float64
    - rectifier_capacitor_reactance::Float64
    - inverter_transformer_ratio::Float64
    - inverter_tap_setting::Float64
    - inverter_tap_limits::MinMax
    - inverter_tap_step::Float64
    - inverter_extinction_angle::Float64
    - inverter_capacitor_reactance::Float64
    - active_power_limits_from::MinMax
    - active_power_limits_to::MinMax
    - reactive_power_limits_from::MinMax
    - reactive_power_limits_to::MinMax
    - loss::TwoTerminalLoss
"""
Base.@kwdef mutable struct TwoTerminalLCCLine <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    arc::Union{Nothing, Int64} = nothing
    active_power_flow::Union{Nothing, Float64} = nothing
    r::Union{Nothing, Float64} = nothing
    transfer_setpoint::Union{Nothing, Float64} = nothing
    scheduled_dc_voltage::Union{Nothing, Float64} = nothing
    rectifier_bridges::Union{Nothing, Int64} = nothing
    rectifier_delay_angle_limits = nothing # spec type: Union{ Nothing, MinMax }
    recrifier_rc::Union{Nothing, Float64} = nothing
    recrifier_xc::Union{Nothing, Float64} = nothing
    recrifier_base_voltage::Union{Nothing, Float64} = nothing
    inverter_bridges::Union{Nothing, Int64} = nothing
    inverter_extinction_angle_limits = nothing # spec type: Union{ Nothing, MinMax }
    inverter_rc::Union{Nothing, Float64} = nothing
    inverter_xc::Union{Nothing, Float64} = nothing
    inverter_base_voltage::Union{Nothing, Float64} = nothing
    power_mode::Union{Nothing, Bool} = true
    switch_mode_voltage::Union{Nothing, Float64} = 0.0
    compounding_resistance::Union{Nothing, Float64} = 0.0
    min_compounding_voltage::Union{Nothing, Float64} = 0.0
    rectifier_transformer_ratio::Union{Nothing, Float64} = 1.0
    rectifier_tap_setting::Union{Nothing, Float64} = 1.0
    rectifier_tap_limits = nothing # spec type: Union{ Nothing, MinMax }
    rectifier_tap_step::Union{Nothing, Float64} = 0.00625
    rectifier_delay_angle::Union{Nothing, Float64} = 0.0
    rectifier_capacitor_reactance::Union{Nothing, Float64} = 0.0
    inverter_transformer_ratio::Union{Nothing, Float64} = 1.0
    inverter_tap_setting::Union{Nothing, Float64} = 1.0
    inverter_tap_limits = nothing # spec type: Union{ Nothing, MinMax }
    inverter_tap_step::Union{Nothing, Float64} = 0.0625
    inverter_extinction_angle::Union{Nothing, Float64} = 0.0
    inverter_capacitor_reactance::Union{Nothing, Float64} = 0.0
    active_power_limits_from = nothing # spec type: Union{ Nothing, MinMax }
    active_power_limits_to = nothing # spec type: Union{ Nothing, MinMax }
    reactive_power_limits_from = nothing # spec type: Union{ Nothing, MinMax }
    reactive_power_limits_to = nothing # spec type: Union{ Nothing, MinMax }
    loss = nothing # spec type: Union{ Nothing, TwoTerminalLoss }

    function TwoTerminalLCCLine(
        id,
        name,
        available,
        arc,
        active_power_flow,
        r,
        transfer_setpoint,
        scheduled_dc_voltage,
        rectifier_bridges,
        rectifier_delay_angle_limits,
        recrifier_rc,
        recrifier_xc,
        recrifier_base_voltage,
        inverter_bridges,
        inverter_extinction_angle_limits,
        inverter_rc,
        inverter_xc,
        inverter_base_voltage,
        power_mode,
        switch_mode_voltage,
        compounding_resistance,
        min_compounding_voltage,
        rectifier_transformer_ratio,
        rectifier_tap_setting,
        rectifier_tap_limits,
        rectifier_tap_step,
        rectifier_delay_angle,
        rectifier_capacitor_reactance,
        inverter_transformer_ratio,
        inverter_tap_setting,
        inverter_tap_limits,
        inverter_tap_step,
        inverter_extinction_angle,
        inverter_capacitor_reactance,
        active_power_limits_from,
        active_power_limits_to,
        reactive_power_limits_from,
        reactive_power_limits_to,
        loss,
    )
        o = new(
            id,
            name,
            available,
            arc,
            active_power_flow,
            r,
            transfer_setpoint,
            scheduled_dc_voltage,
            rectifier_bridges,
            rectifier_delay_angle_limits,
            recrifier_rc,
            recrifier_xc,
            recrifier_base_voltage,
            inverter_bridges,
            inverter_extinction_angle_limits,
            inverter_rc,
            inverter_xc,
            inverter_base_voltage,
            power_mode,
            switch_mode_voltage,
            compounding_resistance,
            min_compounding_voltage,
            rectifier_transformer_ratio,
            rectifier_tap_setting,
            rectifier_tap_limits,
            rectifier_tap_step,
            rectifier_delay_angle,
            rectifier_capacitor_reactance,
            inverter_transformer_ratio,
            inverter_tap_setting,
            inverter_tap_limits,
            inverter_tap_step,
            inverter_extinction_angle,
            inverter_capacitor_reactance,
            active_power_limits_from,
            active_power_limits_to,
            reactive_power_limits_from,
            reactive_power_limits_to,
            loss,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type TwoTerminalLCCLine

const _property_types_TwoTerminalLCCLine = Dict{Symbol, String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("available") => "Bool",
    Symbol("arc") => "Int64",
    Symbol("active_power_flow") => "Float64",
    Symbol("r") => "Float64",
    Symbol("transfer_setpoint") => "Float64",
    Symbol("scheduled_dc_voltage") => "Float64",
    Symbol("rectifier_bridges") => "Int64",
    Symbol("rectifier_delay_angle_limits") => "MinMax",
    Symbol("recrifier_rc") => "Float64",
    Symbol("recrifier_xc") => "Float64",
    Symbol("recrifier_base_voltage") => "Float64",
    Symbol("inverter_bridges") => "Int64",
    Symbol("inverter_extinction_angle_limits") => "MinMax",
    Symbol("inverter_rc") => "Float64",
    Symbol("inverter_xc") => "Float64",
    Symbol("inverter_base_voltage") => "Float64",
    Symbol("power_mode") => "Bool",
    Symbol("switch_mode_voltage") => "Float64",
    Symbol("compounding_resistance") => "Float64",
    Symbol("min_compounding_voltage") => "Float64",
    Symbol("rectifier_transformer_ratio") => "Float64",
    Symbol("rectifier_tap_setting") => "Float64",
    Symbol("rectifier_tap_limits") => "MinMax",
    Symbol("rectifier_tap_step") => "Float64",
    Symbol("rectifier_delay_angle") => "Float64",
    Symbol("rectifier_capacitor_reactance") => "Float64",
    Symbol("inverter_transformer_ratio") => "Float64",
    Symbol("inverter_tap_setting") => "Float64",
    Symbol("inverter_tap_limits") => "MinMax",
    Symbol("inverter_tap_step") => "Float64",
    Symbol("inverter_extinction_angle") => "Float64",
    Symbol("inverter_capacitor_reactance") => "Float64",
    Symbol("active_power_limits_from") => "MinMax",
    Symbol("active_power_limits_to") => "MinMax",
    Symbol("reactive_power_limits_from") => "MinMax",
    Symbol("reactive_power_limits_to") => "MinMax",
    Symbol("loss") => "TwoTerminalLoss",
)
OpenAPI.property_type(::Type{TwoTerminalLCCLine}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_TwoTerminalLCCLine[name]))}

function OpenAPI.check_required(o::TwoTerminalLCCLine)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.arc === nothing && (return false)
    o.active_power_flow === nothing && (return false)
    o.r === nothing && (return false)
    o.transfer_setpoint === nothing && (return false)
    o.scheduled_dc_voltage === nothing && (return false)
    o.rectifier_bridges === nothing && (return false)
    o.rectifier_delay_angle_limits === nothing && (return false)
    o.inverter_bridges === nothing && (return false)
    o.inverter_extinction_angle_limits === nothing && (return false)
    o.inverter_rc === nothing && (return false)
    o.inverter_xc === nothing && (return false)
    o.inverter_base_voltage === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::TwoTerminalLCCLine)
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("id"), o.id)
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("name"), o.name)
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("available"), o.available)
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("arc"), o.arc)
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("active_power_flow"),
        o.active_power_flow,
    )
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("r"), o.r)
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("transfer_setpoint"),
        o.transfer_setpoint,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("scheduled_dc_voltage"),
        o.scheduled_dc_voltage,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("rectifier_bridges"),
        o.rectifier_bridges,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("rectifier_delay_angle_limits"),
        o.rectifier_delay_angle_limits,
    )
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("recrifier_rc"), o.recrifier_rc)
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("recrifier_xc"), o.recrifier_xc)
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("recrifier_base_voltage"),
        o.recrifier_base_voltage,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("inverter_bridges"),
        o.inverter_bridges,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("inverter_extinction_angle_limits"),
        o.inverter_extinction_angle_limits,
    )
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("inverter_rc"), o.inverter_rc)
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("inverter_xc"), o.inverter_xc)
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("inverter_base_voltage"),
        o.inverter_base_voltage,
    )
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("power_mode"), o.power_mode)
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("switch_mode_voltage"),
        o.switch_mode_voltage,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("compounding_resistance"),
        o.compounding_resistance,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("min_compounding_voltage"),
        o.min_compounding_voltage,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("rectifier_transformer_ratio"),
        o.rectifier_transformer_ratio,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("rectifier_tap_setting"),
        o.rectifier_tap_setting,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("rectifier_tap_limits"),
        o.rectifier_tap_limits,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("rectifier_tap_step"),
        o.rectifier_tap_step,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("rectifier_delay_angle"),
        o.rectifier_delay_angle,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("rectifier_capacitor_reactance"),
        o.rectifier_capacitor_reactance,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("inverter_transformer_ratio"),
        o.inverter_transformer_ratio,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("inverter_tap_setting"),
        o.inverter_tap_setting,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("inverter_tap_limits"),
        o.inverter_tap_limits,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("inverter_tap_step"),
        o.inverter_tap_step,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("inverter_extinction_angle"),
        o.inverter_extinction_angle,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("inverter_capacitor_reactance"),
        o.inverter_capacitor_reactance,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("active_power_limits_from"),
        o.active_power_limits_from,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("active_power_limits_to"),
        o.active_power_limits_to,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("reactive_power_limits_from"),
        o.reactive_power_limits_from,
    )
    OpenAPI.validate_property(
        TwoTerminalLCCLine,
        Symbol("reactive_power_limits_to"),
        o.reactive_power_limits_to,
    )
    OpenAPI.validate_property(TwoTerminalLCCLine, Symbol("loss"), o.loss)
end

function OpenAPI.validate_property(::Type{TwoTerminalLCCLine}, name::Symbol, val) end
