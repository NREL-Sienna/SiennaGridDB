# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""RenewableNonDispatch

    RenewableNonDispatch(;
        id=nothing,
        name=nothing,
        available=nothing,
        bus=nothing,
        active_power=nothing,
        reactive_power=nothing,
        rating=nothing,
        prime_mover_type="OT",
        power_factor=nothing,
        base_power=nothing,
        dynamic_injector=nothing,
    )

    - id::Int64
    - name::String
    - available::Bool
    - bus::Int64
    - active_power::Float64
    - reactive_power::Float64
    - rating::Float64
    - prime_mover_type::String
    - power_factor::Float64
    - base_power::Float64
    - dynamic_injector::Any
"""
Base.@kwdef mutable struct RenewableNonDispatch <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    bus::Union{Nothing, Int64} = nothing
    active_power::Union{Nothing, Float64} = nothing
    reactive_power::Union{Nothing, Float64} = nothing
    rating::Union{Nothing, Float64} = nothing
    prime_mover_type::Union{Nothing, String} = "OT"
    power_factor::Union{Nothing, Float64} = nothing
    base_power::Union{Nothing, Float64} = nothing
    dynamic_injector::Union{Nothing, Any} = nothing

    function RenewableNonDispatch(
        id,
        name,
        available,
        bus,
        active_power,
        reactive_power,
        rating,
        prime_mover_type,
        power_factor,
        base_power,
        dynamic_injector,
    )
        o = new(
            id,
            name,
            available,
            bus,
            active_power,
            reactive_power,
            rating,
            prime_mover_type,
            power_factor,
            base_power,
            dynamic_injector,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type RenewableNonDispatch

const _property_types_RenewableNonDispatch = Dict{Symbol, String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("available") => "Bool",
    Symbol("bus") => "Int64",
    Symbol("active_power") => "Float64",
    Symbol("reactive_power") => "Float64",
    Symbol("rating") => "Float64",
    Symbol("prime_mover_type") => "String",
    Symbol("power_factor") => "Float64",
    Symbol("base_power") => "Float64",
    Symbol("dynamic_injector") => "Any",
)
OpenAPI.property_type(::Type{RenewableNonDispatch}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_RenewableNonDispatch[name]))}

function OpenAPI.check_required(o::RenewableNonDispatch)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.bus === nothing && (return false)
    o.active_power === nothing && (return false)
    o.reactive_power === nothing && (return false)
    o.rating === nothing && (return false)
    o.prime_mover_type === nothing && (return false)
    o.power_factor === nothing && (return false)
    o.base_power === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::RenewableNonDispatch)
    OpenAPI.validate_property(RenewableNonDispatch, Symbol("id"), o.id)
    OpenAPI.validate_property(RenewableNonDispatch, Symbol("name"), o.name)
    OpenAPI.validate_property(RenewableNonDispatch, Symbol("available"), o.available)
    OpenAPI.validate_property(RenewableNonDispatch, Symbol("bus"), o.bus)
    OpenAPI.validate_property(RenewableNonDispatch, Symbol("active_power"), o.active_power)
    OpenAPI.validate_property(
        RenewableNonDispatch,
        Symbol("reactive_power"),
        o.reactive_power,
    )
    OpenAPI.validate_property(RenewableNonDispatch, Symbol("rating"), o.rating)
    OpenAPI.validate_property(
        RenewableNonDispatch,
        Symbol("prime_mover_type"),
        o.prime_mover_type,
    )
    OpenAPI.validate_property(RenewableNonDispatch, Symbol("power_factor"), o.power_factor)
    OpenAPI.validate_property(RenewableNonDispatch, Symbol("base_power"), o.base_power)
    OpenAPI.validate_property(
        RenewableNonDispatch,
        Symbol("dynamic_injector"),
        o.dynamic_injector,
    )
end

function OpenAPI.validate_property(::Type{RenewableNonDispatch}, name::Symbol, val)
    if name === Symbol("prime_mover_type")
        OpenAPI.validate_param(
            name,
            "RenewableNonDispatch",
            :enum,
            val,
            [
                "BA",
                "BT",
                "CA",
                "CC",
                "CE",
                "CP",
                "CS",
                "CT",
                "ES",
                "FC",
                "FW",
                "GT",
                "HA",
                "HB",
                "HK",
                "HY",
                "IC",
                "PS",
                "OT",
                "ST",
                "PVe",
                "WT",
                "WS",
            ],
        )
    end
end
