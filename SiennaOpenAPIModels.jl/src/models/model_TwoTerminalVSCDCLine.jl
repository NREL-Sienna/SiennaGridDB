# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""TwoTerminalVSCDCLine

    TwoTerminalVSCDCLine(;
        active_power_flow=nothing,
        arc=nothing,
        available=nothing,
        id=nothing,
        inverter_extinction_angle=nothing,
        inverter_tap_limits=nothing,
        inverter_xrc=nothing,
        name=nothing,
        rectifier_firing_angle=nothing,
        rectifier_tap_limits=nothing,
        rectifier_xrc=nothing,
    )

    - active_power_flow::Float64
    - arc::Int64
    - available::Bool
    - id::Int64
    - inverter_extinction_angle::MinMax
    - inverter_tap_limits::MinMax
    - inverter_xrc::Float64
    - name::String
    - rectifier_firing_angle::MinMax
    - rectifier_tap_limits::MinMax
    - rectifier_xrc::Float64
"""
Base.@kwdef mutable struct TwoTerminalVSCDCLine <: OpenAPI.APIModel
    active_power_flow::Union{Nothing, Float64} = nothing
    arc::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    id::Union{Nothing, Int64} = nothing
    inverter_extinction_angle = nothing # spec type: Union{ Nothing, MinMax }
    inverter_tap_limits = nothing # spec type: Union{ Nothing, MinMax }
    inverter_xrc::Union{Nothing, Float64} = nothing
    name::Union{Nothing, String} = nothing
    rectifier_firing_angle = nothing # spec type: Union{ Nothing, MinMax }
    rectifier_tap_limits = nothing # spec type: Union{ Nothing, MinMax }
    rectifier_xrc::Union{Nothing, Float64} = nothing

    function TwoTerminalVSCDCLine(
        active_power_flow,
        arc,
        available,
        id,
        inverter_extinction_angle,
        inverter_tap_limits,
        inverter_xrc,
        name,
        rectifier_firing_angle,
        rectifier_tap_limits,
        rectifier_xrc,
    )
        o = new(
            active_power_flow,
            arc,
            available,
            id,
            inverter_extinction_angle,
            inverter_tap_limits,
            inverter_xrc,
            name,
            rectifier_firing_angle,
            rectifier_tap_limits,
            rectifier_xrc,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type TwoTerminalVSCDCLine

const _property_types_TwoTerminalVSCDCLine = Dict{Symbol, String}(
    Symbol("active_power_flow") => "Float64",
    Symbol("arc") => "Int64",
    Symbol("available") => "Bool",
    Symbol("id") => "Int64",
    Symbol("inverter_extinction_angle") => "MinMax",
    Symbol("inverter_tap_limits") => "MinMax",
    Symbol("inverter_xrc") => "Float64",
    Symbol("name") => "String",
    Symbol("rectifier_firing_angle") => "MinMax",
    Symbol("rectifier_tap_limits") => "MinMax",
    Symbol("rectifier_xrc") => "Float64",
)
OpenAPI.property_type(::Type{TwoTerminalVSCDCLine}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_TwoTerminalVSCDCLine[name]))}

function OpenAPI.check_required(o::TwoTerminalVSCDCLine)
    o.active_power_flow === nothing && (return false)
    o.arc === nothing && (return false)
    o.available === nothing && (return false)
    o.id === nothing && (return false)
    o.inverter_extinction_angle === nothing && (return false)
    o.inverter_tap_limits === nothing && (return false)
    o.inverter_xrc === nothing && (return false)
    o.name === nothing && (return false)
    o.rectifier_firing_angle === nothing && (return false)
    o.rectifier_tap_limits === nothing && (return false)
    o.rectifier_xrc === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::TwoTerminalVSCDCLine)
    OpenAPI.validate_property(
        TwoTerminalVSCDCLine,
        Symbol("active_power_flow"),
        o.active_power_flow,
    )
    OpenAPI.validate_property(TwoTerminalVSCDCLine, Symbol("arc"), o.arc)
    OpenAPI.validate_property(TwoTerminalVSCDCLine, Symbol("available"), o.available)
    OpenAPI.validate_property(TwoTerminalVSCDCLine, Symbol("id"), o.id)
    OpenAPI.validate_property(
        TwoTerminalVSCDCLine,
        Symbol("inverter_extinction_angle"),
        o.inverter_extinction_angle,
    )
    OpenAPI.validate_property(
        TwoTerminalVSCDCLine,
        Symbol("inverter_tap_limits"),
        o.inverter_tap_limits,
    )
    OpenAPI.validate_property(TwoTerminalVSCDCLine, Symbol("inverter_xrc"), o.inverter_xrc)
    OpenAPI.validate_property(TwoTerminalVSCDCLine, Symbol("name"), o.name)
    OpenAPI.validate_property(
        TwoTerminalVSCDCLine,
        Symbol("rectifier_firing_angle"),
        o.rectifier_firing_angle,
    )
    OpenAPI.validate_property(
        TwoTerminalVSCDCLine,
        Symbol("rectifier_tap_limits"),
        o.rectifier_tap_limits,
    )
    OpenAPI.validate_property(
        TwoTerminalVSCDCLine,
        Symbol("rectifier_xrc"),
        o.rectifier_xrc,
    )
end

function OpenAPI.validate_property(::Type{TwoTerminalVSCDCLine}, name::Symbol, val) end
