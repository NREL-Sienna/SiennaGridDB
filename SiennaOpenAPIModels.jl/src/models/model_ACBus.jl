# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""ACBus

    ACBus(;
        angle=nothing,
        area=nothing,
        available=nothing,
        base_voltage=nothing,
        bustype=nothing,
        id=nothing,
        load_zone=nothing,
        magnitude=nothing,
        name=nothing,
        number=nothing,
        voltage_limits=nothing,
    )

    - angle::Float64
    - area::Int64
    - available::Bool
    - base_voltage::Float64
    - bustype::String
    - id::Int64
    - load_zone::Int64
    - magnitude::Float64
    - name::String
    - number::Int64
    - voltage_limits::MinMax
"""
Base.@kwdef mutable struct ACBus <: OpenAPI.APIModel
    angle::Union{Nothing, Float64} = nothing
    area::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    base_voltage::Union{Nothing, Float64} = nothing
    bustype::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    load_zone::Union{Nothing, Int64} = nothing
    magnitude::Union{Nothing, Float64} = nothing
    name::Union{Nothing, String} = nothing
    number::Union{Nothing, Int64} = nothing
    voltage_limits = nothing # spec type: Union{ Nothing, MinMax }

    function ACBus(
        angle,
        area,
        available,
        base_voltage,
        bustype,
        id,
        load_zone,
        magnitude,
        name,
        number,
        voltage_limits,
    )
        o = new(
            angle,
            area,
            available,
            base_voltage,
            bustype,
            id,
            load_zone,
            magnitude,
            name,
            number,
            voltage_limits,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ACBus

const _property_types_ACBus = Dict{Symbol, String}(
    Symbol("angle") => "Float64",
    Symbol("area") => "Int64",
    Symbol("available") => "Bool",
    Symbol("base_voltage") => "Float64",
    Symbol("bustype") => "String",
    Symbol("id") => "Int64",
    Symbol("load_zone") => "Int64",
    Symbol("magnitude") => "Float64",
    Symbol("name") => "String",
    Symbol("number") => "Int64",
    Symbol("voltage_limits") => "MinMax",
)
OpenAPI.property_type(::Type{ACBus}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_ACBus[name]))}

function OpenAPI.check_required(o::ACBus)
    o.available === nothing && (return false)
    o.bustype === nothing && (return false)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.number === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::ACBus)
    OpenAPI.validate_property(ACBus, Symbol("angle"), o.angle)
    OpenAPI.validate_property(ACBus, Symbol("area"), o.area)
    OpenAPI.validate_property(ACBus, Symbol("available"), o.available)
    OpenAPI.validate_property(ACBus, Symbol("base_voltage"), o.base_voltage)
    OpenAPI.validate_property(ACBus, Symbol("bustype"), o.bustype)
    OpenAPI.validate_property(ACBus, Symbol("id"), o.id)
    OpenAPI.validate_property(ACBus, Symbol("load_zone"), o.load_zone)
    OpenAPI.validate_property(ACBus, Symbol("magnitude"), o.magnitude)
    OpenAPI.validate_property(ACBus, Symbol("name"), o.name)
    OpenAPI.validate_property(ACBus, Symbol("number"), o.number)
    OpenAPI.validate_property(ACBus, Symbol("voltage_limits"), o.voltage_limits)
end

function OpenAPI.validate_property(::Type{ACBus}, name::Symbol, val)
    if name === Symbol("bustype")
        OpenAPI.validate_param(
            name,
            "ACBus",
            :enum,
            val,
            ["PQ", "PV", "REF", "ISOLATED", "SLACK"],
        )
    end
end
