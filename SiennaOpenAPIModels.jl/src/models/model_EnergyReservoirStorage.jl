# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EnergyReservoirStorage

    EnergyReservoirStorage(;
        id=nothing,
        name=nothing,
        available=nothing,
        bus=nothing,
        active_power=nothing,
        reactive_power=nothing,
        rating=nothing,
        prime_mover_type="OT",
        storage_technology_type=nothing,
        storage_capacity=nothing,
        storage_level_limits=nothing,
        initial_storage_capacity_level=nothing,
        input_active_power_limits=nothing,
        output_active_power_limits=nothing,
        efficiency=nothing,
        reactive_power_limits=nothing,
        operation_cost=nothing,
        conversion_factor=1.0,
        storage_target=0.0,
        cycle_limits=10000,
        base_power=nothing,
        dynamic_injector=nothing,
    )

    - id::Int64
    - name::String
    - available::Bool
    - bus::Int64
    - active_power::Float64
    - reactive_power::Float64
    - rating::Float64
    - prime_mover_type::String
    - storage_technology_type::String : defines the storage technology used in an energy Storage system, based on the options in EIA form 923.
    - storage_capacity::Float64
    - storage_level_limits::MinMax
    - initial_storage_capacity_level::Float64
    - input_active_power_limits::MinMax
    - output_active_power_limits::MinMax
    - efficiency::EnergyReservoirStorageEfficiency
    - reactive_power_limits::MinMax
    - operation_cost::StorageCost
    - conversion_factor::Float64
    - storage_target::Float64
    - cycle_limits::Int64
    - base_power::Float64
    - dynamic_injector::Any
"""
Base.@kwdef mutable struct EnergyReservoirStorage <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    bus::Union{Nothing, Int64} = nothing
    active_power::Union{Nothing, Float64} = nothing
    reactive_power::Union{Nothing, Float64} = nothing
    rating::Union{Nothing, Float64} = nothing
    prime_mover_type::Union{Nothing, String} = "OT"
    storage_technology_type::Union{Nothing, String} = nothing
    storage_capacity::Union{Nothing, Float64} = nothing
    storage_level_limits = nothing # spec type: Union{ Nothing, MinMax }
    initial_storage_capacity_level::Union{Nothing, Float64} = nothing
    input_active_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    output_active_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    efficiency = nothing # spec type: Union{ Nothing, EnergyReservoirStorageEfficiency }
    reactive_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    operation_cost = nothing # spec type: Union{ Nothing, StorageCost }
    conversion_factor::Union{Nothing, Float64} = 1.0
    storage_target::Union{Nothing, Float64} = 0.0
    cycle_limits::Union{Nothing, Int64} = 10000
    base_power::Union{Nothing, Float64} = nothing
    dynamic_injector::Union{Nothing, Any} = nothing

    function EnergyReservoirStorage(id, name, available, bus, active_power, reactive_power, rating, prime_mover_type, storage_technology_type, storage_capacity, storage_level_limits, initial_storage_capacity_level, input_active_power_limits, output_active_power_limits, efficiency, reactive_power_limits, operation_cost, conversion_factor, storage_target, cycle_limits, base_power, dynamic_injector, )
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("id"), id)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("name"), name)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("available"), available)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("bus"), bus)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("active_power"), active_power)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("reactive_power"), reactive_power)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("rating"), rating)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("prime_mover_type"), prime_mover_type)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("storage_technology_type"), storage_technology_type)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("storage_capacity"), storage_capacity)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("storage_level_limits"), storage_level_limits)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("initial_storage_capacity_level"), initial_storage_capacity_level)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("input_active_power_limits"), input_active_power_limits)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("output_active_power_limits"), output_active_power_limits)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("efficiency"), efficiency)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("reactive_power_limits"), reactive_power_limits)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("operation_cost"), operation_cost)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("conversion_factor"), conversion_factor)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("storage_target"), storage_target)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("cycle_limits"), cycle_limits)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("base_power"), base_power)
        OpenAPI.validate_property(EnergyReservoirStorage, Symbol("dynamic_injector"), dynamic_injector)
        return new(id, name, available, bus, active_power, reactive_power, rating, prime_mover_type, storage_technology_type, storage_capacity, storage_level_limits, initial_storage_capacity_level, input_active_power_limits, output_active_power_limits, efficiency, reactive_power_limits, operation_cost, conversion_factor, storage_target, cycle_limits, base_power, dynamic_injector, )
    end
end # type EnergyReservoirStorage

const _property_types_EnergyReservoirStorage = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("available")=>"Bool", Symbol("bus")=>"Int64", Symbol("active_power")=>"Float64", Symbol("reactive_power")=>"Float64", Symbol("rating")=>"Float64", Symbol("prime_mover_type")=>"String", Symbol("storage_technology_type")=>"String", Symbol("storage_capacity")=>"Float64", Symbol("storage_level_limits")=>"MinMax", Symbol("initial_storage_capacity_level")=>"Float64", Symbol("input_active_power_limits")=>"MinMax", Symbol("output_active_power_limits")=>"MinMax", Symbol("efficiency")=>"EnergyReservoirStorageEfficiency", Symbol("reactive_power_limits")=>"MinMax", Symbol("operation_cost")=>"StorageCost", Symbol("conversion_factor")=>"Float64", Symbol("storage_target")=>"Float64", Symbol("cycle_limits")=>"Int64", Symbol("base_power")=>"Float64", Symbol("dynamic_injector")=>"Any", )
OpenAPI.property_type(::Type{ EnergyReservoirStorage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EnergyReservoirStorage[name]))}

function check_required(o::EnergyReservoirStorage)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.bus === nothing && (return false)
    o.active_power === nothing && (return false)
    o.reactive_power === nothing && (return false)
    o.rating === nothing && (return false)
    o.prime_mover_type === nothing && (return false)
    o.storage_technology_type === nothing && (return false)
    o.storage_capacity === nothing && (return false)
    o.storage_level_limits === nothing && (return false)
    o.initial_storage_capacity_level === nothing && (return false)
    o.input_active_power_limits === nothing && (return false)
    o.output_active_power_limits === nothing && (return false)
    o.efficiency === nothing && (return false)
    o.base_power === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ EnergyReservoirStorage }, name::Symbol, val)








    if name === Symbol("prime_mover_type")
        OpenAPI.validate_param(name, "EnergyReservoirStorage", :enum, val, ["BA", "BT", "CA", "CC", "CE", "CP", "CS", "CT", "ES", "FC", "FW", "GT", "HA", "HB", "HK", "HY", "IC", "PS", "OT", "ST", "PVe", "WT", "WS"])
    end


    if name === Symbol("storage_technology_type")
        OpenAPI.validate_param(name, "EnergyReservoirStorage", :enum, val, ["PTES", "LIB", "LAB", "FLWB", "SIB", "ZIB", "HGS", "LAES", "OTHER_CHEM", "OTHER_MECH", "OTHER_THERM"])
    end














end
