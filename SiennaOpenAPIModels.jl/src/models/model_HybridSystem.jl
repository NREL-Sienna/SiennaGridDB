# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""HybridSystem

    HybridSystem(;
        id=nothing,
        name=nothing,
        available=nothing,
        status=nothing,
        bus=nothing,
        active_power=nothing,
        reactive_power=nothing,
        base_power=nothing,
        operation_cost=nothing,
        thermal_unit=nothing,
        electric_load=nothing,
        storage=nothing,
        renewable_unit=nothing,
        interconnection_impedance=nothing,
        interconnection_rating=nothing,
        input_active_power_limits=nothing,
        output_active_power_limits=nothing,
        reactive_power_limits=nothing,
        interconnection_efficiency=nothing,
        dynamic_injector=nothing,
    )

    - id::Int64
    - name::String
    - available::Bool
    - status::Bool
    - bus::Int64
    - active_power::Float64
    - reactive_power::Float64
    - base_power::Float64
    - operation_cost::MarketBidCost
    - thermal_unit::Float64
    - electric_load::Float64
    - storage::Float64
    - renewable_unit::Float64
    - interconnection_impedance::ComplexNumber
    - interconnection_rating::Float64
    - input_active_power_limits::MinMax
    - output_active_power_limits::MinMax
    - reactive_power_limits::MinMax
    - interconnection_efficiency::InOut
    - dynamic_injector::Any
"""
Base.@kwdef mutable struct HybridSystem <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    status::Union{Nothing, Bool} = nothing
    bus::Union{Nothing, Int64} = nothing
    active_power::Union{Nothing, Float64} = nothing
    reactive_power::Union{Nothing, Float64} = nothing
    base_power::Union{Nothing, Float64} = nothing
    operation_cost = nothing # spec type: Union{ Nothing, MarketBidCost }
    thermal_unit::Union{Nothing, Float64} = nothing
    electric_load::Union{Nothing, Float64} = nothing
    storage::Union{Nothing, Float64} = nothing
    renewable_unit::Union{Nothing, Float64} = nothing
    interconnection_impedance = nothing # spec type: Union{ Nothing, ComplexNumber }
    interconnection_rating::Union{Nothing, Float64} = nothing
    input_active_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    output_active_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    reactive_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    interconnection_efficiency = nothing # spec type: Union{ Nothing, InOut }
    dynamic_injector::Union{Nothing, Any} = nothing

    function HybridSystem(
        id,
        name,
        available,
        status,
        bus,
        active_power,
        reactive_power,
        base_power,
        operation_cost,
        thermal_unit,
        electric_load,
        storage,
        renewable_unit,
        interconnection_impedance,
        interconnection_rating,
        input_active_power_limits,
        output_active_power_limits,
        reactive_power_limits,
        interconnection_efficiency,
        dynamic_injector,
    )
        OpenAPI.validate_property(HybridSystem, Symbol("id"), id)
        OpenAPI.validate_property(HybridSystem, Symbol("name"), name)
        OpenAPI.validate_property(HybridSystem, Symbol("available"), available)
        OpenAPI.validate_property(HybridSystem, Symbol("status"), status)
        OpenAPI.validate_property(HybridSystem, Symbol("bus"), bus)
        OpenAPI.validate_property(HybridSystem, Symbol("active_power"), active_power)
        OpenAPI.validate_property(HybridSystem, Symbol("reactive_power"), reactive_power)
        OpenAPI.validate_property(HybridSystem, Symbol("base_power"), base_power)
        OpenAPI.validate_property(HybridSystem, Symbol("operation_cost"), operation_cost)
        OpenAPI.validate_property(HybridSystem, Symbol("thermal_unit"), thermal_unit)
        OpenAPI.validate_property(HybridSystem, Symbol("electric_load"), electric_load)
        OpenAPI.validate_property(HybridSystem, Symbol("storage"), storage)
        OpenAPI.validate_property(HybridSystem, Symbol("renewable_unit"), renewable_unit)
        OpenAPI.validate_property(
            HybridSystem,
            Symbol("interconnection_impedance"),
            interconnection_impedance,
        )
        OpenAPI.validate_property(
            HybridSystem,
            Symbol("interconnection_rating"),
            interconnection_rating,
        )
        OpenAPI.validate_property(
            HybridSystem,
            Symbol("input_active_power_limits"),
            input_active_power_limits,
        )
        OpenAPI.validate_property(
            HybridSystem,
            Symbol("output_active_power_limits"),
            output_active_power_limits,
        )
        OpenAPI.validate_property(
            HybridSystem,
            Symbol("reactive_power_limits"),
            reactive_power_limits,
        )
        OpenAPI.validate_property(
            HybridSystem,
            Symbol("interconnection_efficiency"),
            interconnection_efficiency,
        )
        OpenAPI.validate_property(
            HybridSystem,
            Symbol("dynamic_injector"),
            dynamic_injector,
        )
        return new(
            id,
            name,
            available,
            status,
            bus,
            active_power,
            reactive_power,
            base_power,
            operation_cost,
            thermal_unit,
            electric_load,
            storage,
            renewable_unit,
            interconnection_impedance,
            interconnection_rating,
            input_active_power_limits,
            output_active_power_limits,
            reactive_power_limits,
            interconnection_efficiency,
            dynamic_injector,
        )
    end
end # type HybridSystem

const _property_types_HybridSystem = Dict{Symbol, String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("available") => "Bool",
    Symbol("status") => "Bool",
    Symbol("bus") => "Int64",
    Symbol("active_power") => "Float64",
    Symbol("reactive_power") => "Float64",
    Symbol("base_power") => "Float64",
    Symbol("operation_cost") => "MarketBidCost",
    Symbol("thermal_unit") => "Float64",
    Symbol("electric_load") => "Float64",
    Symbol("storage") => "Float64",
    Symbol("renewable_unit") => "Float64",
    Symbol("interconnection_impedance") => "ComplexNumber",
    Symbol("interconnection_rating") => "Float64",
    Symbol("input_active_power_limits") => "MinMax",
    Symbol("output_active_power_limits") => "MinMax",
    Symbol("reactive_power_limits") => "MinMax",
    Symbol("interconnection_efficiency") => "InOut",
    Symbol("dynamic_injector") => "Any",
)
OpenAPI.property_type(::Type{HybridSystem}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_HybridSystem[name]))}

function check_required(o::HybridSystem)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.status === nothing && (return false)
    o.bus === nothing && (return false)
    o.active_power === nothing && (return false)
    o.reactive_power === nothing && (return false)
    o.base_power === nothing && (return false)
    o.operation_cost === nothing && (return false)
    o.interconnection_impedance === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{HybridSystem}, name::Symbol, val) end
