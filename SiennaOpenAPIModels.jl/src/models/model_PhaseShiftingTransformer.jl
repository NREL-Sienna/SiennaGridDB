# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""PhaseShiftingTransformer

    PhaseShiftingTransformer(;
        id=nothing,
        name=nothing,
        available=nothing,
        active_power_flow=nothing,
        reactive_power_flow=nothing,
        arc=nothing,
        r=nothing,
        x=nothing,
        primary_shunt=nothing,
        tap=nothing,
        alpha=nothing,
        rating=nothing,
        base_power=nothing,
        base_voltage_primary=nothing,
        base_voltage_secondary=nothing,
        rating_b=nothing,
        rating_c=nothing,
        phase_angle_limits=nothing,
    )

    - id::Int64
    - name::String
    - available::Bool
    - active_power_flow::Float64
    - reactive_power_flow::Float64
    - arc::Int64
    - r::Float64
    - x::Float64
    - primary_shunt::ComplexNumber
    - tap::Float64
    - alpha::Float64
    - rating::Float64
    - base_power::Float64
    - base_voltage_primary::Float64
    - base_voltage_secondary::Float64
    - rating_b::Float64
    - rating_c::Float64
    - phase_angle_limits::MinMax
"""
Base.@kwdef mutable struct PhaseShiftingTransformer <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    active_power_flow::Union{Nothing, Float64} = nothing
    reactive_power_flow::Union{Nothing, Float64} = nothing
    arc::Union{Nothing, Int64} = nothing
    r::Union{Nothing, Float64} = nothing
    x::Union{Nothing, Float64} = nothing
    primary_shunt = nothing # spec type: Union{ Nothing, ComplexNumber }
    tap::Union{Nothing, Float64} = nothing
    alpha::Union{Nothing, Float64} = nothing
    rating::Union{Nothing, Float64} = nothing
    base_power::Union{Nothing, Float64} = nothing
    base_voltage_primary::Union{Nothing, Float64} = nothing
    base_voltage_secondary::Union{Nothing, Float64} = nothing
    rating_b::Union{Nothing, Float64} = nothing
    rating_c::Union{Nothing, Float64} = nothing
    phase_angle_limits = nothing # spec type: Union{ Nothing, MinMax }

    function PhaseShiftingTransformer(
        id,
        name,
        available,
        active_power_flow,
        reactive_power_flow,
        arc,
        r,
        x,
        primary_shunt,
        tap,
        alpha,
        rating,
        base_power,
        base_voltage_primary,
        base_voltage_secondary,
        rating_b,
        rating_c,
        phase_angle_limits,
    )
        o = new(
            id,
            name,
            available,
            active_power_flow,
            reactive_power_flow,
            arc,
            r,
            x,
            primary_shunt,
            tap,
            alpha,
            rating,
            base_power,
            base_voltage_primary,
            base_voltage_secondary,
            rating_b,
            rating_c,
            phase_angle_limits,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PhaseShiftingTransformer

const _property_types_PhaseShiftingTransformer = Dict{Symbol, String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("available") => "Bool",
    Symbol("active_power_flow") => "Float64",
    Symbol("reactive_power_flow") => "Float64",
    Symbol("arc") => "Int64",
    Symbol("r") => "Float64",
    Symbol("x") => "Float64",
    Symbol("primary_shunt") => "ComplexNumber",
    Symbol("tap") => "Float64",
    Symbol("alpha") => "Float64",
    Symbol("rating") => "Float64",
    Symbol("base_power") => "Float64",
    Symbol("base_voltage_primary") => "Float64",
    Symbol("base_voltage_secondary") => "Float64",
    Symbol("rating_b") => "Float64",
    Symbol("rating_c") => "Float64",
    Symbol("phase_angle_limits") => "MinMax",
)
OpenAPI.property_type(::Type{PhaseShiftingTransformer}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_PhaseShiftingTransformer[name]))}

function OpenAPI.check_required(o::PhaseShiftingTransformer)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.active_power_flow === nothing && (return false)
    o.arc === nothing && (return false)
    o.r === nothing && (return false)
    o.x === nothing && (return false)
    o.primary_shunt === nothing && (return false)
    o.tap === nothing && (return false)
    o.alpha === nothing && (return false)
    o.base_power === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::PhaseShiftingTransformer)
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("id"), o.id)
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("name"), o.name)
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("available"), o.available)
    OpenAPI.validate_property(
        PhaseShiftingTransformer,
        Symbol("active_power_flow"),
        o.active_power_flow,
    )
    OpenAPI.validate_property(
        PhaseShiftingTransformer,
        Symbol("reactive_power_flow"),
        o.reactive_power_flow,
    )
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("arc"), o.arc)
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("r"), o.r)
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("x"), o.x)
    OpenAPI.validate_property(
        PhaseShiftingTransformer,
        Symbol("primary_shunt"),
        o.primary_shunt,
    )
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("tap"), o.tap)
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("alpha"), o.alpha)
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("rating"), o.rating)
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("base_power"), o.base_power)
    OpenAPI.validate_property(
        PhaseShiftingTransformer,
        Symbol("base_voltage_primary"),
        o.base_voltage_primary,
    )
    OpenAPI.validate_property(
        PhaseShiftingTransformer,
        Symbol("base_voltage_secondary"),
        o.base_voltage_secondary,
    )
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("rating_b"), o.rating_b)
    OpenAPI.validate_property(PhaseShiftingTransformer, Symbol("rating_c"), o.rating_c)
    OpenAPI.validate_property(
        PhaseShiftingTransformer,
        Symbol("phase_angle_limits"),
        o.phase_angle_limits,
    )
end

function OpenAPI.validate_property(::Type{PhaseShiftingTransformer}, name::Symbol, val) end
