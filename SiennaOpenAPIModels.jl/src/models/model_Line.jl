# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""Line

    Line(;
        id=nothing,
        name=nothing,
        available=nothing,
        active_power_flow=nothing,
        reactive_power_flow=nothing,
        arc=nothing,
        r=nothing,
        x=nothing,
        b=nothing,
        rating=nothing,
        rating_b=nothing,
        rating_c=nothing,
        angle_limits=nothing,
        g=nothing,
    )

    - id::Int64
    - name::String
    - available::Bool
    - active_power_flow::Float64
    - reactive_power_flow::Float64
    - arc::Int64
    - r::Float64
    - x::Float64
    - b::FromTo
    - rating::Float64
    - rating_b::Float64
    - rating_c::Float64
    - angle_limits::MinMax
    - g::FromTo
"""
Base.@kwdef mutable struct Line <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    active_power_flow::Union{Nothing, Float64} = nothing
    reactive_power_flow::Union{Nothing, Float64} = nothing
    arc::Union{Nothing, Int64} = nothing
    r::Union{Nothing, Float64} = nothing
    x::Union{Nothing, Float64} = nothing
    b = nothing # spec type: Union{ Nothing, FromTo }
    rating::Union{Nothing, Float64} = nothing
    rating_b::Union{Nothing, Float64} = nothing
    rating_c::Union{Nothing, Float64} = nothing
    angle_limits = nothing # spec type: Union{ Nothing, MinMax }
    g = nothing # spec type: Union{ Nothing, FromTo }

    function Line(
        id,
        name,
        available,
        active_power_flow,
        reactive_power_flow,
        arc,
        r,
        x,
        b,
        rating,
        rating_b,
        rating_c,
        angle_limits,
        g,
    )
        OpenAPI.validate_property(Line, Symbol("id"), id)
        OpenAPI.validate_property(Line, Symbol("name"), name)
        OpenAPI.validate_property(Line, Symbol("available"), available)
        OpenAPI.validate_property(Line, Symbol("active_power_flow"), active_power_flow)
        OpenAPI.validate_property(Line, Symbol("reactive_power_flow"), reactive_power_flow)
        OpenAPI.validate_property(Line, Symbol("arc"), arc)
        OpenAPI.validate_property(Line, Symbol("r"), r)
        OpenAPI.validate_property(Line, Symbol("x"), x)
        OpenAPI.validate_property(Line, Symbol("b"), b)
        OpenAPI.validate_property(Line, Symbol("rating"), rating)
        OpenAPI.validate_property(Line, Symbol("rating_b"), rating_b)
        OpenAPI.validate_property(Line, Symbol("rating_c"), rating_c)
        OpenAPI.validate_property(Line, Symbol("angle_limits"), angle_limits)
        OpenAPI.validate_property(Line, Symbol("g"), g)
        return new(
            id,
            name,
            available,
            active_power_flow,
            reactive_power_flow,
            arc,
            r,
            x,
            b,
            rating,
            rating_b,
            rating_c,
            angle_limits,
            g,
        )
    end
end # type Line

const _property_types_Line = Dict{Symbol, String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("available") => "Bool",
    Symbol("active_power_flow") => "Float64",
    Symbol("reactive_power_flow") => "Float64",
    Symbol("arc") => "Int64",
    Symbol("r") => "Float64",
    Symbol("x") => "Float64",
    Symbol("b") => "FromTo",
    Symbol("rating") => "Float64",
    Symbol("rating_b") => "Float64",
    Symbol("rating_c") => "Float64",
    Symbol("angle_limits") => "MinMax",
    Symbol("g") => "FromTo",
)
OpenAPI.property_type(::Type{Line}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_Line[name]))}

function check_required(o::Line)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.active_power_flow === nothing && (return false)
    o.reactive_power_flow === nothing && (return false)
    o.arc === nothing && (return false)
    o.r === nothing && (return false)
    o.x === nothing && (return false)
    o.rating === nothing && (return false)
    o.angle_limits === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{Line}, name::Symbol, val) end
