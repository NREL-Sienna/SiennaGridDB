# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""AreaInterchange

    AreaInterchange(;
        active_power_flow=nothing,
        available=nothing,
        id=nothing,
        flow_limits=nothing,
        from_area=nothing,
        name=nothing,
        to_area=nothing,
    )

    - active_power_flow::Float64
    - available::Bool
    - id::Int64
    - flow_limits::FromToToFrom
    - from_area::Float64
    - name::String
    - to_area::Float64
"""
Base.@kwdef mutable struct AreaInterchange <: OpenAPI.APIModel
    active_power_flow::Union{Nothing, Float64} = nothing
    available::Union{Nothing, Bool} = nothing
    id::Union{Nothing, Int64} = nothing
    flow_limits = nothing # spec type: Union{ Nothing, FromToToFrom }
    from_area::Union{Nothing, Float64} = nothing
    name::Union{Nothing, String} = nothing
    to_area::Union{Nothing, Float64} = nothing

    function AreaInterchange(
        active_power_flow,
        available,
        id,
        flow_limits,
        from_area,
        name,
        to_area,
    )
        OpenAPI.validate_property(
            AreaInterchange,
            Symbol("active_power_flow"),
            active_power_flow,
        )
        OpenAPI.validate_property(AreaInterchange, Symbol("available"), available)
        OpenAPI.validate_property(AreaInterchange, Symbol("id"), id)
        OpenAPI.validate_property(AreaInterchange, Symbol("flow_limits"), flow_limits)
        OpenAPI.validate_property(AreaInterchange, Symbol("from_area"), from_area)
        OpenAPI.validate_property(AreaInterchange, Symbol("name"), name)
        OpenAPI.validate_property(AreaInterchange, Symbol("to_area"), to_area)
        return new(active_power_flow, available, id, flow_limits, from_area, name, to_area)
    end
end # type AreaInterchange

const _property_types_AreaInterchange = Dict{Symbol, String}(
    Symbol("active_power_flow") => "Float64",
    Symbol("available") => "Bool",
    Symbol("id") => "Int64",
    Symbol("flow_limits") => "FromToToFrom",
    Symbol("from_area") => "Float64",
    Symbol("name") => "String",
    Symbol("to_area") => "Float64",
)
OpenAPI.property_type(::Type{AreaInterchange}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_AreaInterchange[name]))}

function check_required(o::AreaInterchange)
    o.active_power_flow === nothing && (return false)
    o.available === nothing && (return false)
    o.id === nothing && (return false)
    o.flow_limits === nothing && (return false)
    o.from_area === nothing && (return false)
    o.name === nothing && (return false)
    o.to_area === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{AreaInterchange}, name::Symbol, val)
end
