# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ThermalStandard_operation_cost
Cost representation for thermal generation units

    ThermalStandardOperationCost(;
        variable=nothing,
        fixed=nothing,
        start_up=nothing,
        shut_down=nothing,
    )

    - variable::ThermalStandardOperationCostVariable
    - fixed::Float64 : Fixed cost of keeping the unit online. For some cost represenations this field can be duplicative
    - start_up::ThermalStandardOperationCostStartUp
    - shut_down::Float64 : Cost to turn the unit off
"""
Base.@kwdef mutable struct ThermalStandardOperationCost <: OpenAPI.APIModel
    variable = nothing # spec type: Union{ Nothing, ThermalStandardOperationCostVariable }
    fixed::Union{Nothing,Float64} = nothing
    start_up = nothing # spec type: Union{ Nothing, ThermalStandardOperationCostStartUp }
    shut_down::Union{Nothing,Float64} = nothing

    function ThermalStandardOperationCost(variable, fixed, start_up, shut_down)
        OpenAPI.validate_property(
            ThermalStandardOperationCost,
            Symbol("variable"),
            variable,
        )
        OpenAPI.validate_property(ThermalStandardOperationCost, Symbol("fixed"), fixed)
        OpenAPI.validate_property(
            ThermalStandardOperationCost,
            Symbol("start_up"),
            start_up,
        )
        OpenAPI.validate_property(
            ThermalStandardOperationCost,
            Symbol("shut_down"),
            shut_down,
        )
        return new(variable, fixed, start_up, shut_down)
    end
end # type ThermalStandardOperationCost

const _property_types_ThermalStandardOperationCost = Dict{Symbol,String}(
    Symbol("variable") => "ThermalStandardOperationCostVariable",
    Symbol("fixed") => "Float64",
    Symbol("start_up") => "ThermalStandardOperationCostStartUp",
    Symbol("shut_down") => "Float64",
)
OpenAPI.property_type(::Type{ThermalStandardOperationCost}, name::Symbol) =
    Union{Nothing,eval(Base.Meta.parse(_property_types_ThermalStandardOperationCost[name]))}

function check_required(o::ThermalStandardOperationCost)
    o.variable === nothing && (return false)
    o.fixed === nothing && (return false)
    o.start_up === nothing && (return false)
    o.shut_down === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ThermalStandardOperationCost}, name::Symbol, val) end
