# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""MarketBidCost
An operating cost for market bids of energy and ancilliary services (currently not included) for any asset

    MarketBidCost(;
        no_load_cost=nothing,
        start_up=nothing,
        shut_down=nothing,
        incremental_offer_curves=nothing,
        decremental_offer_curves=nothing,
        incremental_initial_input=nothing,
        decremental_initial_input=nothing,
    )

    - no_load_cost::MarketBidCostNoLoadCost
    - start_up::MarketBidCostStartUp
    - shut_down::Float64
    - incremental_offer_curves::MarketBidCostIncrementalOfferCurves
    - decremental_offer_curves::MarketBidCostDecrementalOfferCurves
    - incremental_initial_input::TimeSeriesKey
    - decremental_initial_input::TimeSeriesKey
"""
Base.@kwdef mutable struct MarketBidCost <: OpenAPI.APIModel
    no_load_cost = nothing # spec type: Union{ Nothing, MarketBidCostNoLoadCost }
    start_up = nothing # spec type: Union{ Nothing, MarketBidCostStartUp }
    shut_down::Union{Nothing, Float64} = nothing
    incremental_offer_curves = nothing # spec type: Union{ Nothing, MarketBidCostIncrementalOfferCurves }
    decremental_offer_curves = nothing # spec type: Union{ Nothing, MarketBidCostDecrementalOfferCurves }
    incremental_initial_input = nothing # spec type: Union{ Nothing, TimeSeriesKey }
    decremental_initial_input = nothing # spec type: Union{ Nothing, TimeSeriesKey }

    function MarketBidCost(
        no_load_cost,
        start_up,
        shut_down,
        incremental_offer_curves,
        decremental_offer_curves,
        incremental_initial_input,
        decremental_initial_input,
    )
        OpenAPI.validate_property(MarketBidCost, Symbol("no_load_cost"), no_load_cost)
        OpenAPI.validate_property(MarketBidCost, Symbol("start_up"), start_up)
        OpenAPI.validate_property(MarketBidCost, Symbol("shut_down"), shut_down)
        OpenAPI.validate_property(
            MarketBidCost,
            Symbol("incremental_offer_curves"),
            incremental_offer_curves,
        )
        OpenAPI.validate_property(
            MarketBidCost,
            Symbol("decremental_offer_curves"),
            decremental_offer_curves,
        )
        OpenAPI.validate_property(
            MarketBidCost,
            Symbol("incremental_initial_input"),
            incremental_initial_input,
        )
        OpenAPI.validate_property(
            MarketBidCost,
            Symbol("decremental_initial_input"),
            decremental_initial_input,
        )
        return new(
            no_load_cost,
            start_up,
            shut_down,
            incremental_offer_curves,
            decremental_offer_curves,
            incremental_initial_input,
            decremental_initial_input,
        )
    end
end # type MarketBidCost

const _property_types_MarketBidCost = Dict{Symbol, String}(
    Symbol("no_load_cost") => "MarketBidCostNoLoadCost",
    Symbol("start_up") => "MarketBidCostStartUp",
    Symbol("shut_down") => "Float64",
    Symbol("incremental_offer_curves") => "MarketBidCostIncrementalOfferCurves",
    Symbol("decremental_offer_curves") => "MarketBidCostDecrementalOfferCurves",
    Symbol("incremental_initial_input") => "TimeSeriesKey",
    Symbol("decremental_initial_input") => "TimeSeriesKey",
)
OpenAPI.property_type(::Type{MarketBidCost}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_MarketBidCost[name]))}

function check_required(o::MarketBidCost)
    o.start_up === nothing && (return false)
    o.shut_down === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{MarketBidCost}, name::Symbol, val) end
