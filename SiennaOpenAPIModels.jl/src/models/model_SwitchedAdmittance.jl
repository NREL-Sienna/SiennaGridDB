# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""SwitchedAdmittance

    SwitchedAdmittance(;
        id=nothing,
        name=nothing,
        available=nothing,
        bus=nothing,
        Y=nothing,
        number_of_steps=nothing,
        Y_increase=nothing,
        admittance_limits=nothing,
        dynamic_injector=nothing,
    )

    - id::Int64
    - name::String
    - available::Bool
    - bus::Int64
    - Y::ComplexNumber
    - number_of_steps::Vector{Int64}
    - Y_increase::Vector{ComplexNumber}
    - admittance_limits::MinMax
    - dynamic_injector::Any
"""
Base.@kwdef mutable struct SwitchedAdmittance <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    bus::Union{Nothing, Int64} = nothing
    Y = nothing # spec type: Union{ Nothing, ComplexNumber }
    number_of_steps::Union{Nothing, Vector{Int64}} = nothing
    Y_increase::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ComplexNumber} }
    admittance_limits = nothing # spec type: Union{ Nothing, MinMax }
    dynamic_injector::Union{Nothing, Any} = nothing

    function SwitchedAdmittance(
        id,
        name,
        available,
        bus,
        Y,
        number_of_steps,
        Y_increase,
        admittance_limits,
        dynamic_injector,
    )
        OpenAPI.validate_property(SwitchedAdmittance, Symbol("id"), id)
        OpenAPI.validate_property(SwitchedAdmittance, Symbol("name"), name)
        OpenAPI.validate_property(SwitchedAdmittance, Symbol("available"), available)
        OpenAPI.validate_property(SwitchedAdmittance, Symbol("bus"), bus)
        OpenAPI.validate_property(SwitchedAdmittance, Symbol("Y"), Y)
        OpenAPI.validate_property(
            SwitchedAdmittance,
            Symbol("number_of_steps"),
            number_of_steps,
        )
        OpenAPI.validate_property(SwitchedAdmittance, Symbol("Y_increase"), Y_increase)
        OpenAPI.validate_property(
            SwitchedAdmittance,
            Symbol("admittance_limits"),
            admittance_limits,
        )
        OpenAPI.validate_property(
            SwitchedAdmittance,
            Symbol("dynamic_injector"),
            dynamic_injector,
        )
        return new(
            id,
            name,
            available,
            bus,
            Y,
            number_of_steps,
            Y_increase,
            admittance_limits,
            dynamic_injector,
        )
    end
end # type SwitchedAdmittance

const _property_types_SwitchedAdmittance = Dict{Symbol, String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("available") => "Bool",
    Symbol("bus") => "Int64",
    Symbol("Y") => "ComplexNumber",
    Symbol("number_of_steps") => "Vector{Int64}",
    Symbol("Y_increase") => "Vector{ComplexNumber}",
    Symbol("admittance_limits") => "MinMax",
    Symbol("dynamic_injector") => "Any",
)
OpenAPI.property_type(::Type{SwitchedAdmittance}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_SwitchedAdmittance[name]))}

function check_required(o::SwitchedAdmittance)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.bus === nothing && (return false)
    o.Y === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{SwitchedAdmittance}, name::Symbol, val) end
