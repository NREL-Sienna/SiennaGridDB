# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""TwoTerminalGenericHVDCLine

    TwoTerminalGenericHVDCLine(;
        active_power_limits_from=nothing,
        active_power_limits_to=nothing,
        active_power_flow=nothing,
        arc=nothing,
        available=nothing,
        id=nothing,
        loss=nothing,
        name=nothing,
        reactive_power_limits_from=nothing,
        reactive_power_limits_to=nothing,
    )

    - active_power_limits_from::MinMax
    - active_power_limits_to::MinMax
    - active_power_flow::Float64
    - arc::Int64
    - available::Bool
    - id::Int64
    - loss::TwoTerminalGenericHVDCLineLoss
    - name::String
    - reactive_power_limits_from::MinMax
    - reactive_power_limits_to::MinMax
"""
Base.@kwdef mutable struct TwoTerminalGenericHVDCLine <: OpenAPI.APIModel
    active_power_limits_from = nothing # spec type: Union{ Nothing, MinMax }
    active_power_limits_to = nothing # spec type: Union{ Nothing, MinMax }
    active_power_flow::Union{Nothing, Float64} = nothing
    arc::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    id::Union{Nothing, Int64} = nothing
    loss = nothing # spec type: Union{ Nothing, TwoTerminalGenericHVDCLineLoss }
    name::Union{Nothing, String} = nothing
    reactive_power_limits_from = nothing # spec type: Union{ Nothing, MinMax }
    reactive_power_limits_to = nothing # spec type: Union{ Nothing, MinMax }

    function TwoTerminalGenericHVDCLine(
        active_power_limits_from,
        active_power_limits_to,
        active_power_flow,
        arc,
        available,
        id,
        loss,
        name,
        reactive_power_limits_from,
        reactive_power_limits_to,
    )
        OpenAPI.validate_property(
            TwoTerminalGenericHVDCLine,
            Symbol("active_power_limits_from"),
            active_power_limits_from,
        )
        OpenAPI.validate_property(
            TwoTerminalGenericHVDCLine,
            Symbol("active_power_limits_to"),
            active_power_limits_to,
        )
        OpenAPI.validate_property(
            TwoTerminalGenericHVDCLine,
            Symbol("active_power_flow"),
            active_power_flow,
        )
        OpenAPI.validate_property(TwoTerminalGenericHVDCLine, Symbol("arc"), arc)
        OpenAPI.validate_property(
            TwoTerminalGenericHVDCLine,
            Symbol("available"),
            available,
        )
        OpenAPI.validate_property(TwoTerminalGenericHVDCLine, Symbol("id"), id)
        OpenAPI.validate_property(TwoTerminalGenericHVDCLine, Symbol("loss"), loss)
        OpenAPI.validate_property(TwoTerminalGenericHVDCLine, Symbol("name"), name)
        OpenAPI.validate_property(
            TwoTerminalGenericHVDCLine,
            Symbol("reactive_power_limits_from"),
            reactive_power_limits_from,
        )
        OpenAPI.validate_property(
            TwoTerminalGenericHVDCLine,
            Symbol("reactive_power_limits_to"),
            reactive_power_limits_to,
        )
        return new(
            active_power_limits_from,
            active_power_limits_to,
            active_power_flow,
            arc,
            available,
            id,
            loss,
            name,
            reactive_power_limits_from,
            reactive_power_limits_to,
        )
    end
end # type TwoTerminalGenericHVDCLine

const _property_types_TwoTerminalGenericHVDCLine = Dict{Symbol, String}(
    Symbol("active_power_limits_from") => "MinMax",
    Symbol("active_power_limits_to") => "MinMax",
    Symbol("active_power_flow") => "Float64",
    Symbol("arc") => "Int64",
    Symbol("available") => "Bool",
    Symbol("id") => "Int64",
    Symbol("loss") => "TwoTerminalGenericHVDCLineLoss",
    Symbol("name") => "String",
    Symbol("reactive_power_limits_from") => "MinMax",
    Symbol("reactive_power_limits_to") => "MinMax",
)
OpenAPI.property_type(::Type{TwoTerminalGenericHVDCLine}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_TwoTerminalGenericHVDCLine[name]))}

function check_required(o::TwoTerminalGenericHVDCLine)
    o.active_power_limits_from === nothing && (return false)
    o.active_power_limits_to === nothing && (return false)
    o.active_power_flow === nothing && (return false)
    o.arc === nothing && (return false)
    o.available === nothing && (return false)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.reactive_power_limits_from === nothing && (return false)
    o.reactive_power_limits_to === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{TwoTerminalGenericHVDCLine}, name::Symbol, val) end
