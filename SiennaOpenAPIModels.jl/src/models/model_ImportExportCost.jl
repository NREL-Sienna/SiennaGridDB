# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""ImportExportCost

    ImportExportCost(;
        cost_type="IMPORTEXPORT",
        import_offer_curves=nothing,
        export_offer_curves=nothing,
        energy_import_weekly_limit=nothing,
        energy_export_weekly_limit=nothing,
    )

    - cost_type::String
    - import_offer_curves::CostCurve
    - export_offer_curves::CostCurve
    - energy_import_weekly_limit::Float64
    - energy_export_weekly_limit::Float64
"""
Base.@kwdef mutable struct ImportExportCost <: OpenAPI.APIModel
    cost_type::Union{Nothing, String} = "IMPORTEXPORT"
    import_offer_curves = nothing # spec type: Union{ Nothing, CostCurve }
    export_offer_curves = nothing # spec type: Union{ Nothing, CostCurve }
    energy_import_weekly_limit::Union{Nothing, Float64} = nothing
    energy_export_weekly_limit::Union{Nothing, Float64} = nothing

    function ImportExportCost(
        cost_type,
        import_offer_curves,
        export_offer_curves,
        energy_import_weekly_limit,
        energy_export_weekly_limit,
    )
        o = new(
            cost_type,
            import_offer_curves,
            export_offer_curves,
            energy_import_weekly_limit,
            energy_export_weekly_limit,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ImportExportCost

const _property_types_ImportExportCost = Dict{Symbol, String}(
    Symbol("cost_type") => "String",
    Symbol("import_offer_curves") => "CostCurve",
    Symbol("export_offer_curves") => "CostCurve",
    Symbol("energy_import_weekly_limit") => "Float64",
    Symbol("energy_export_weekly_limit") => "Float64",
)
OpenAPI.property_type(::Type{ImportExportCost}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_ImportExportCost[name]))}

function OpenAPI.check_required(o::ImportExportCost)
    o.energy_import_weekly_limit === nothing && (return false)
    o.energy_export_weekly_limit === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::ImportExportCost)
    OpenAPI.validate_property(ImportExportCost, Symbol("cost_type"), o.cost_type)
    OpenAPI.validate_property(
        ImportExportCost,
        Symbol("import_offer_curves"),
        o.import_offer_curves,
    )
    OpenAPI.validate_property(
        ImportExportCost,
        Symbol("export_offer_curves"),
        o.export_offer_curves,
    )
    OpenAPI.validate_property(
        ImportExportCost,
        Symbol("energy_import_weekly_limit"),
        o.energy_import_weekly_limit,
    )
    OpenAPI.validate_property(
        ImportExportCost,
        Symbol("energy_export_weekly_limit"),
        o.energy_export_weekly_limit,
    )
end

function OpenAPI.validate_property(::Type{ImportExportCost}, name::Symbol, val)
    if name === Symbol("cost_type")
        OpenAPI.validate_param(name, "ImportExportCost", :enum, val, ["IMPORTEXPORT"])
    end
end
