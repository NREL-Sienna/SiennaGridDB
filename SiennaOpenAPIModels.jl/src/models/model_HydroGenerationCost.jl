# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""HydroGenerationCost
Cost representation for hydro gen units

    HydroGenerationCost(;
        cost_type="HYDRO",
        fixed=0.0,
        variable=nothing,
    )

    - cost_type::String
    - fixed::Float64
    - variable::ProductionVariableCostCurve
"""
Base.@kwdef mutable struct HydroGenerationCost <: OpenAPI.APIModel
    cost_type::Union{Nothing, String} = "HYDRO"
    fixed::Union{Nothing, Float64} = 0.0
    variable = nothing # spec type: Union{ Nothing, ProductionVariableCostCurve }

    function HydroGenerationCost(cost_type, fixed, variable, )
        OpenAPI.validate_property(HydroGenerationCost, Symbol("cost_type"), cost_type)
        OpenAPI.validate_property(HydroGenerationCost, Symbol("fixed"), fixed)
        OpenAPI.validate_property(HydroGenerationCost, Symbol("variable"), variable)
        return new(cost_type, fixed, variable, )
    end
end # type HydroGenerationCost

const _property_types_HydroGenerationCost = Dict{Symbol,String}(Symbol("cost_type")=>"String", Symbol("fixed")=>"Float64", Symbol("variable")=>"ProductionVariableCostCurve", )
OpenAPI.property_type(::Type{ HydroGenerationCost }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_HydroGenerationCost[name]))}

function check_required(o::HydroGenerationCost)
    o.variable === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ HydroGenerationCost }, name::Symbol, val)

    if name === Symbol("cost_type")
        OpenAPI.validate_param(name, "HydroGenerationCost", :enum, val, ["HYDRO"])
    end



end
