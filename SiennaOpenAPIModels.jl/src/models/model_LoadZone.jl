# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LoadZone

    LoadZone(;
        id=nothing,
        name=nothing,
        peak_active_power=nothing,
        peak_reactive_power=nothing,
    )

    - id::Int64
    - name::String
    - peak_active_power::Float64
    - peak_reactive_power::Float64
"""
Base.@kwdef mutable struct LoadZone <: OpenAPI.APIModel
    id::Union{Nothing,Int64} = nothing
    name::Union{Nothing,String} = nothing
    peak_active_power::Union{Nothing,Float64} = nothing
    peak_reactive_power::Union{Nothing,Float64} = nothing

    function LoadZone(id, name, peak_active_power, peak_reactive_power)
        OpenAPI.validate_property(LoadZone, Symbol("id"), id)
        OpenAPI.validate_property(LoadZone, Symbol("name"), name)
        OpenAPI.validate_property(LoadZone, Symbol("peak_active_power"), peak_active_power)
        OpenAPI.validate_property(
            LoadZone,
            Symbol("peak_reactive_power"),
            peak_reactive_power,
        )
        return new(id, name, peak_active_power, peak_reactive_power)
    end
end # type LoadZone

const _property_types_LoadZone = Dict{Symbol,String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("peak_active_power") => "Float64",
    Symbol("peak_reactive_power") => "Float64",
)
OpenAPI.property_type(::Type{LoadZone}, name::Symbol) =
    Union{Nothing,eval(Base.Meta.parse(_property_types_LoadZone[name]))}

function check_required(o::LoadZone)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.peak_active_power === nothing && (return false)
    o.peak_reactive_power === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{LoadZone}, name::Symbol, val)




end
