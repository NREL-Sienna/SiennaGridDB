# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LinearFunctionData

    LinearFunctionData(;
        function_type=nothing,
        proportional_term=nothing,
        constant_term=nothing,
    )

    - function_type::String
    - proportional_term::Float64
    - constant_term::Float64
"""
Base.@kwdef mutable struct LinearFunctionData <: OpenAPI.APIModel
    function_type::Union{Nothing,String} = nothing
    proportional_term::Union{Nothing,Float64} = nothing
    constant_term::Union{Nothing,Float64} = nothing

    function LinearFunctionData(function_type, proportional_term, constant_term)
        OpenAPI.validate_property(
            LinearFunctionData,
            Symbol("function_type"),
            function_type,
        )
        OpenAPI.validate_property(
            LinearFunctionData,
            Symbol("proportional_term"),
            proportional_term,
        )
        OpenAPI.validate_property(
            LinearFunctionData,
            Symbol("constant_term"),
            constant_term,
        )
        return new(function_type, proportional_term, constant_term)
    end
end # type LinearFunctionData

const _property_types_LinearFunctionData = Dict{Symbol,String}(
    Symbol("function_type") => "String",
    Symbol("proportional_term") => "Float64",
    Symbol("constant_term") => "Float64",
)
OpenAPI.property_type(::Type{LinearFunctionData}, name::Symbol) =
    Union{Nothing,eval(Base.Meta.parse(_property_types_LinearFunctionData[name]))}

function check_required(o::LinearFunctionData)
    o.proportional_term === nothing && (return false)
    o.constant_term === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{LinearFunctionData}, name::Symbol, val)
    if name === Symbol("function_type")
        OpenAPI.validate_param(name, "LinearFunctionData", :enum, val, ["LINEAR"])
    end
end
