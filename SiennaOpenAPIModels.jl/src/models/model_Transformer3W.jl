# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""Transformer3W

    Transformer3W(;
        id=nothing,
        name=nothing,
        available=nothing,
        primary_secondary_arc=nothing,
        secondary_tertiary_arc=nothing,
        primary_tertiary_arc=nothing,
        star_bus=nothing,
        active_power_flow_primary=nothing,
        reactive_power_flow_primary=nothing,
        active_power_flow_secondary=nothing,
        reactive_power_flow_secondary=nothing,
        active_power_flow_tertiary=nothing,
        reactive_power_flow_tertiary=nothing,
        r_primary=nothing,
        x_primary=nothing,
        r_secondary=nothing,
        x_secondary=nothing,
        r_tertiary=nothing,
        x_tertiary=nothing,
        rating=nothing,
        r_12=nothing,
        x_12=nothing,
        r_23=nothing,
        x_23=nothing,
        r_13=nothing,
        x_13=nothing,
        g=0.0,
        b=0.0,
        primary_turns_ratio=1.0,
        secondary_turns_ratio=1.0,
        tertiary_turns_ratio=1.0,
        available_primary=true,
        available_secondary=true,
        available_tertiary=true,
        rating_primary=0.0,
        rating_secondary=0.0,
        rating_tertiary=0.0,
    )

    - id::Int64
    - name::String
    - available::Bool
    - primary_secondary_arc::Int64
    - secondary_tertiary_arc::Int64
    - primary_tertiary_arc::Int64
    - star_bus::Int64
    - active_power_flow_primary::Float64
    - reactive_power_flow_primary::Float64
    - active_power_flow_secondary::Float64
    - reactive_power_flow_secondary::Float64
    - active_power_flow_tertiary::Float64
    - reactive_power_flow_tertiary::Float64
    - r_primary::Float64
    - x_primary::Float64
    - r_secondary::Float64
    - x_secondary::Float64
    - r_tertiary::Float64
    - x_tertiary::Float64
    - rating::Float64
    - r_12::Float64
    - x_12::Float64
    - r_23::Float64
    - x_23::Float64
    - r_13::Float64
    - x_13::Float64
    - g::Float64
    - b::Float64
    - primary_turns_ratio::Float64
    - secondary_turns_ratio::Float64
    - tertiary_turns_ratio::Float64
    - available_primary::Bool
    - available_secondary::Bool
    - available_tertiary::Bool
    - rating_primary::Float64
    - rating_secondary::Float64
    - rating_tertiary::Float64
"""
Base.@kwdef mutable struct Transformer3W <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    available::Union{Nothing, Bool} = nothing
    primary_secondary_arc::Union{Nothing, Int64} = nothing
    secondary_tertiary_arc::Union{Nothing, Int64} = nothing
    primary_tertiary_arc::Union{Nothing, Int64} = nothing
    star_bus::Union{Nothing, Int64} = nothing
    active_power_flow_primary::Union{Nothing, Float64} = nothing
    reactive_power_flow_primary::Union{Nothing, Float64} = nothing
    active_power_flow_secondary::Union{Nothing, Float64} = nothing
    reactive_power_flow_secondary::Union{Nothing, Float64} = nothing
    active_power_flow_tertiary::Union{Nothing, Float64} = nothing
    reactive_power_flow_tertiary::Union{Nothing, Float64} = nothing
    r_primary::Union{Nothing, Float64} = nothing
    x_primary::Union{Nothing, Float64} = nothing
    r_secondary::Union{Nothing, Float64} = nothing
    x_secondary::Union{Nothing, Float64} = nothing
    r_tertiary::Union{Nothing, Float64} = nothing
    x_tertiary::Union{Nothing, Float64} = nothing
    rating::Union{Nothing, Float64} = nothing
    r_12::Union{Nothing, Float64} = nothing
    x_12::Union{Nothing, Float64} = nothing
    r_23::Union{Nothing, Float64} = nothing
    x_23::Union{Nothing, Float64} = nothing
    r_13::Union{Nothing, Float64} = nothing
    x_13::Union{Nothing, Float64} = nothing
    g::Union{Nothing, Float64} = 0.0
    b::Union{Nothing, Float64} = 0.0
    primary_turns_ratio::Union{Nothing, Float64} = 1.0
    secondary_turns_ratio::Union{Nothing, Float64} = 1.0
    tertiary_turns_ratio::Union{Nothing, Float64} = 1.0
    available_primary::Union{Nothing, Bool} = true
    available_secondary::Union{Nothing, Bool} = true
    available_tertiary::Union{Nothing, Bool} = true
    rating_primary::Union{Nothing, Float64} = 0.0
    rating_secondary::Union{Nothing, Float64} = 0.0
    rating_tertiary::Union{Nothing, Float64} = 0.0

    function Transformer3W(
        id,
        name,
        available,
        primary_secondary_arc,
        secondary_tertiary_arc,
        primary_tertiary_arc,
        star_bus,
        active_power_flow_primary,
        reactive_power_flow_primary,
        active_power_flow_secondary,
        reactive_power_flow_secondary,
        active_power_flow_tertiary,
        reactive_power_flow_tertiary,
        r_primary,
        x_primary,
        r_secondary,
        x_secondary,
        r_tertiary,
        x_tertiary,
        rating,
        r_12,
        x_12,
        r_23,
        x_23,
        r_13,
        x_13,
        g,
        b,
        primary_turns_ratio,
        secondary_turns_ratio,
        tertiary_turns_ratio,
        available_primary,
        available_secondary,
        available_tertiary,
        rating_primary,
        rating_secondary,
        rating_tertiary,
    )
        o = new(
            id,
            name,
            available,
            primary_secondary_arc,
            secondary_tertiary_arc,
            primary_tertiary_arc,
            star_bus,
            active_power_flow_primary,
            reactive_power_flow_primary,
            active_power_flow_secondary,
            reactive_power_flow_secondary,
            active_power_flow_tertiary,
            reactive_power_flow_tertiary,
            r_primary,
            x_primary,
            r_secondary,
            x_secondary,
            r_tertiary,
            x_tertiary,
            rating,
            r_12,
            x_12,
            r_23,
            x_23,
            r_13,
            x_13,
            g,
            b,
            primary_turns_ratio,
            secondary_turns_ratio,
            tertiary_turns_ratio,
            available_primary,
            available_secondary,
            available_tertiary,
            rating_primary,
            rating_secondary,
            rating_tertiary,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Transformer3W

const _property_types_Transformer3W = Dict{Symbol, String}(
    Symbol("id") => "Int64",
    Symbol("name") => "String",
    Symbol("available") => "Bool",
    Symbol("primary_secondary_arc") => "Int64",
    Symbol("secondary_tertiary_arc") => "Int64",
    Symbol("primary_tertiary_arc") => "Int64",
    Symbol("star_bus") => "Int64",
    Symbol("active_power_flow_primary") => "Float64",
    Symbol("reactive_power_flow_primary") => "Float64",
    Symbol("active_power_flow_secondary") => "Float64",
    Symbol("reactive_power_flow_secondary") => "Float64",
    Symbol("active_power_flow_tertiary") => "Float64",
    Symbol("reactive_power_flow_tertiary") => "Float64",
    Symbol("r_primary") => "Float64",
    Symbol("x_primary") => "Float64",
    Symbol("r_secondary") => "Float64",
    Symbol("x_secondary") => "Float64",
    Symbol("r_tertiary") => "Float64",
    Symbol("x_tertiary") => "Float64",
    Symbol("rating") => "Float64",
    Symbol("r_12") => "Float64",
    Symbol("x_12") => "Float64",
    Symbol("r_23") => "Float64",
    Symbol("x_23") => "Float64",
    Symbol("r_13") => "Float64",
    Symbol("x_13") => "Float64",
    Symbol("g") => "Float64",
    Symbol("b") => "Float64",
    Symbol("primary_turns_ratio") => "Float64",
    Symbol("secondary_turns_ratio") => "Float64",
    Symbol("tertiary_turns_ratio") => "Float64",
    Symbol("available_primary") => "Bool",
    Symbol("available_secondary") => "Bool",
    Symbol("available_tertiary") => "Bool",
    Symbol("rating_primary") => "Float64",
    Symbol("rating_secondary") => "Float64",
    Symbol("rating_tertiary") => "Float64",
)
OpenAPI.property_type(::Type{Transformer3W}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_Transformer3W[name]))}

function OpenAPI.check_required(o::Transformer3W)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.available === nothing && (return false)
    o.primary_secondary_arc === nothing && (return false)
    o.secondary_tertiary_arc === nothing && (return false)
    o.primary_tertiary_arc === nothing && (return false)
    o.star_bus === nothing && (return false)
    o.active_power_flow_primary === nothing && (return false)
    o.reactive_power_flow_primary === nothing && (return false)
    o.active_power_flow_secondary === nothing && (return false)
    o.reactive_power_flow_secondary === nothing && (return false)
    o.active_power_flow_tertiary === nothing && (return false)
    o.reactive_power_flow_tertiary === nothing && (return false)
    o.r_primary === nothing && (return false)
    o.x_primary === nothing && (return false)
    o.r_secondary === nothing && (return false)
    o.x_secondary === nothing && (return false)
    o.r_tertiary === nothing && (return false)
    o.x_tertiary === nothing && (return false)
    o.r_12 === nothing && (return false)
    o.x_12 === nothing && (return false)
    o.r_23 === nothing && (return false)
    o.x_23 === nothing && (return false)
    o.r_13 === nothing && (return false)
    o.x_13 === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::Transformer3W)
    OpenAPI.validate_property(Transformer3W, Symbol("id"), o.id)
    OpenAPI.validate_property(Transformer3W, Symbol("name"), o.name)
    OpenAPI.validate_property(Transformer3W, Symbol("available"), o.available)
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("primary_secondary_arc"),
        o.primary_secondary_arc,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("secondary_tertiary_arc"),
        o.secondary_tertiary_arc,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("primary_tertiary_arc"),
        o.primary_tertiary_arc,
    )
    OpenAPI.validate_property(Transformer3W, Symbol("star_bus"), o.star_bus)
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("active_power_flow_primary"),
        o.active_power_flow_primary,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("reactive_power_flow_primary"),
        o.reactive_power_flow_primary,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("active_power_flow_secondary"),
        o.active_power_flow_secondary,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("reactive_power_flow_secondary"),
        o.reactive_power_flow_secondary,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("active_power_flow_tertiary"),
        o.active_power_flow_tertiary,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("reactive_power_flow_tertiary"),
        o.reactive_power_flow_tertiary,
    )
    OpenAPI.validate_property(Transformer3W, Symbol("r_primary"), o.r_primary)
    OpenAPI.validate_property(Transformer3W, Symbol("x_primary"), o.x_primary)
    OpenAPI.validate_property(Transformer3W, Symbol("r_secondary"), o.r_secondary)
    OpenAPI.validate_property(Transformer3W, Symbol("x_secondary"), o.x_secondary)
    OpenAPI.validate_property(Transformer3W, Symbol("r_tertiary"), o.r_tertiary)
    OpenAPI.validate_property(Transformer3W, Symbol("x_tertiary"), o.x_tertiary)
    OpenAPI.validate_property(Transformer3W, Symbol("rating"), o.rating)
    OpenAPI.validate_property(Transformer3W, Symbol("r_12"), o.r_12)
    OpenAPI.validate_property(Transformer3W, Symbol("x_12"), o.x_12)
    OpenAPI.validate_property(Transformer3W, Symbol("r_23"), o.r_23)
    OpenAPI.validate_property(Transformer3W, Symbol("x_23"), o.x_23)
    OpenAPI.validate_property(Transformer3W, Symbol("r_13"), o.r_13)
    OpenAPI.validate_property(Transformer3W, Symbol("x_13"), o.x_13)
    OpenAPI.validate_property(Transformer3W, Symbol("g"), o.g)
    OpenAPI.validate_property(Transformer3W, Symbol("b"), o.b)
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("primary_turns_ratio"),
        o.primary_turns_ratio,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("secondary_turns_ratio"),
        o.secondary_turns_ratio,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("tertiary_turns_ratio"),
        o.tertiary_turns_ratio,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("available_primary"),
        o.available_primary,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("available_secondary"),
        o.available_secondary,
    )
    OpenAPI.validate_property(
        Transformer3W,
        Symbol("available_tertiary"),
        o.available_tertiary,
    )
    OpenAPI.validate_property(Transformer3W, Symbol("rating_primary"), o.rating_primary)
    OpenAPI.validate_property(Transformer3W, Symbol("rating_secondary"), o.rating_secondary)
    OpenAPI.validate_property(Transformer3W, Symbol("rating_tertiary"), o.rating_tertiary)
end

function OpenAPI.validate_property(::Type{Transformer3W}, name::Symbol, val) end
