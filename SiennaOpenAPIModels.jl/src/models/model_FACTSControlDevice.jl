# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""FACTSControlDevice

    FACTSControlDevice(;
        name=nothing,
        id=nothing,
        available=nothing,
        bus=nothing,
        control_mode=nothing,
        max_shunt_current=nothing,
        reactive_power_required=nothing,
        voltage_setpoint=nothing,
        dynamic_injector=nothing,
    )

    - name::String
    - id::Int64
    - available::Bool
    - bus::Int64
    - control_mode::String
    - max_shunt_current::Float64
    - reactive_power_required::Float64
    - voltage_setpoint::Float64
    - dynamic_injector::Any
"""
Base.@kwdef mutable struct FACTSControlDevice <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    bus::Union{Nothing, Int64} = nothing
    control_mode::Union{Nothing, String} = nothing
    max_shunt_current::Union{Nothing, Float64} = nothing
    reactive_power_required::Union{Nothing, Float64} = nothing
    voltage_setpoint::Union{Nothing, Float64} = nothing
    dynamic_injector::Union{Nothing, Any} = nothing

    function FACTSControlDevice(
        name,
        id,
        available,
        bus,
        control_mode,
        max_shunt_current,
        reactive_power_required,
        voltage_setpoint,
        dynamic_injector,
    )
        o = new(
            name,
            id,
            available,
            bus,
            control_mode,
            max_shunt_current,
            reactive_power_required,
            voltage_setpoint,
            dynamic_injector,
        )
        OpenAPI.validate_properties(o)
        return o
    end
end # type FACTSControlDevice

const _property_types_FACTSControlDevice = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("id") => "Int64",
    Symbol("available") => "Bool",
    Symbol("bus") => "Int64",
    Symbol("control_mode") => "String",
    Symbol("max_shunt_current") => "Float64",
    Symbol("reactive_power_required") => "Float64",
    Symbol("voltage_setpoint") => "Float64",
    Symbol("dynamic_injector") => "Any",
)
OpenAPI.property_type(::Type{FACTSControlDevice}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_FACTSControlDevice[name]))}

function OpenAPI.check_required(o::FACTSControlDevice)
    o.name === nothing && (return false)
    o.id === nothing && (return false)
    o.available === nothing && (return false)
    o.bus === nothing && (return false)
    o.max_shunt_current === nothing && (return false)
    o.reactive_power_required === nothing && (return false)
    o.voltage_setpoint === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::FACTSControlDevice)
    OpenAPI.validate_property(FACTSControlDevice, Symbol("name"), o.name)
    OpenAPI.validate_property(FACTSControlDevice, Symbol("id"), o.id)
    OpenAPI.validate_property(FACTSControlDevice, Symbol("available"), o.available)
    OpenAPI.validate_property(FACTSControlDevice, Symbol("bus"), o.bus)
    OpenAPI.validate_property(FACTSControlDevice, Symbol("control_mode"), o.control_mode)
    OpenAPI.validate_property(
        FACTSControlDevice,
        Symbol("max_shunt_current"),
        o.max_shunt_current,
    )
    OpenAPI.validate_property(
        FACTSControlDevice,
        Symbol("reactive_power_required"),
        o.reactive_power_required,
    )
    OpenAPI.validate_property(
        FACTSControlDevice,
        Symbol("voltage_setpoint"),
        o.voltage_setpoint,
    )
    OpenAPI.validate_property(
        FACTSControlDevice,
        Symbol("dynamic_injector"),
        o.dynamic_injector,
    )
end

function OpenAPI.validate_property(::Type{FACTSControlDevice}, name::Symbol, val)
    if name === Symbol("control_mode")
        OpenAPI.validate_param(
            name,
            "FACTSControlDevice",
            :enum,
            val,
            ["OOS", "NML", "BYP"],
        )
    end
end
