# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""InterconnectingConverter

    InterconnectingConverter(;
        name=nothing,
        id=nothing,
        available=nothing,
        bus=nothing,
        dc_bus=nothing,
        active_power=nothing,
        active_power_limits=nothing,
        base_power=nothing,
        dc_current=0.0,
        max_dc_current=100000000,
        loss_function=nothing,
        rating=nothing,
        dynamic_injector=nothing,
    )

    - name::String
    - id::Int64
    - available::Bool
    - bus::Int64
    - dc_bus::Int64
    - active_power::Float64
    - active_power_limits::MinMax
    - base_power::Float64
    - dc_current::Float64
    - max_dc_current::Float64
    - loss_function::InputOutputCurve
    - rating::Float64
    - dynamic_injector::Any
"""
Base.@kwdef mutable struct InterconnectingConverter <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    available::Union{Nothing, Bool} = nothing
    bus::Union{Nothing, Int64} = nothing
    dc_bus::Union{Nothing, Int64} = nothing
    active_power::Union{Nothing, Float64} = nothing
    active_power_limits = nothing # spec type: Union{ Nothing, MinMax }
    base_power::Union{Nothing, Float64} = nothing
    dc_current::Union{Nothing, Float64} = 0.0
    max_dc_current::Union{Nothing, Float64} = 100000000
    loss_function = nothing # spec type: Union{ Nothing, InputOutputCurve }
    rating::Union{Nothing, Float64} = nothing
    dynamic_injector::Union{Nothing, Any} = nothing

    function InterconnectingConverter(
        name,
        id,
        available,
        bus,
        dc_bus,
        active_power,
        active_power_limits,
        base_power,
        dc_current,
        max_dc_current,
        loss_function,
        rating,
        dynamic_injector,
    )
        OpenAPI.validate_property(InterconnectingConverter, Symbol("name"), name)
        OpenAPI.validate_property(InterconnectingConverter, Symbol("id"), id)
        OpenAPI.validate_property(InterconnectingConverter, Symbol("available"), available)
        OpenAPI.validate_property(InterconnectingConverter, Symbol("bus"), bus)
        OpenAPI.validate_property(InterconnectingConverter, Symbol("dc_bus"), dc_bus)
        OpenAPI.validate_property(
            InterconnectingConverter,
            Symbol("active_power"),
            active_power,
        )
        OpenAPI.validate_property(
            InterconnectingConverter,
            Symbol("active_power_limits"),
            active_power_limits,
        )
        OpenAPI.validate_property(
            InterconnectingConverter,
            Symbol("base_power"),
            base_power,
        )
        OpenAPI.validate_property(
            InterconnectingConverter,
            Symbol("dc_current"),
            dc_current,
        )
        OpenAPI.validate_property(
            InterconnectingConverter,
            Symbol("max_dc_current"),
            max_dc_current,
        )
        OpenAPI.validate_property(
            InterconnectingConverter,
            Symbol("loss_function"),
            loss_function,
        )
        OpenAPI.validate_property(InterconnectingConverter, Symbol("rating"), rating)
        OpenAPI.validate_property(
            InterconnectingConverter,
            Symbol("dynamic_injector"),
            dynamic_injector,
        )
        return new(
            name,
            id,
            available,
            bus,
            dc_bus,
            active_power,
            active_power_limits,
            base_power,
            dc_current,
            max_dc_current,
            loss_function,
            rating,
            dynamic_injector,
        )
    end
end # type InterconnectingConverter

const _property_types_InterconnectingConverter = Dict{Symbol, String}(
    Symbol("name") => "String",
    Symbol("id") => "Int64",
    Symbol("available") => "Bool",
    Symbol("bus") => "Int64",
    Symbol("dc_bus") => "Int64",
    Symbol("active_power") => "Float64",
    Symbol("active_power_limits") => "MinMax",
    Symbol("base_power") => "Float64",
    Symbol("dc_current") => "Float64",
    Symbol("max_dc_current") => "Float64",
    Symbol("loss_function") => "InputOutputCurve",
    Symbol("rating") => "Float64",
    Symbol("dynamic_injector") => "Any",
)
OpenAPI.property_type(::Type{InterconnectingConverter}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_InterconnectingConverter[name]))}

function check_required(o::InterconnectingConverter)
    o.name === nothing && (return false)
    o.id === nothing && (return false)
    o.available === nothing && (return false)
    o.bus === nothing && (return false)
    o.dc_bus === nothing && (return false)
    o.active_power === nothing && (return false)
    o.active_power_limits === nothing && (return false)
    o.base_power === nothing && (return false)
    o.rating === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{InterconnectingConverter}, name::Symbol, val) end
